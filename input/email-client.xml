<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="..\transformspp2html.xsl"?>
<?xml-model href="https://raw.githubusercontent.com/commoncriteria/transforms/master/schemas/CCProtectionProfile.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<Module name="PP-Module for Email Client" boilerplate="yes" target-product="Email Client" target-products="Email Clients" xmlns="https://niap-ccevs.org/cc/v1" xmlns:h="http://www.w3.org/1999/xhtml" xmlns:sec="https://niap-ccevs.org/cc/v1/section">
  <PPReference>
    <ReferenceTable>
      <PPVersion>
        1.0
      </PPVersion>
      <PPAuthor>
        National Information Assurance Partnership
      </PPAuthor>
      <PPPubDate>
        2025-06-16
      </PPPubDate>
      <Keywords>
        email; email client
      </Keywords>
    </ReferenceTable>
  </PPReference>
  <RevisionHistory>
    <entry>
      <version>
        1.0
      </version>
      <date>
        2025-06-10
      </date>
      <subject>
        Initial release as CC:2022 PP-Module
      </subject>
    </entry>
  </RevisionHistory>
  <include-pkg id="pkg-x509">
    <git>
      <url>
        https://github.com/commoncriteria/X509
      </url>
      <branch>
        release-1.0
      </branch>
    </git>
    <url>
      https://www.niap-ccevs.org/protectionprofiles/511
    </url>
  </include-pkg>
  <pp-preferences/>
  <sec:Introduction>
    <sec:Overview>
      The scope of the PP-Module for Email Clients, Version 1.0 is to describe the security functionality of email client applications in terms of [CC] 
      and to define functional and assurance requirements for the specific email-related capabilities of email client applications.
      Email clients are user applications that provide functionality to send, receive, access, and manage email. 
      
      This PP-Module is intended for use with the following Base-PP:
      <h:ul>
        <h:li>
          Protection Profile for Application Software, Version 2.0
        </h:li>
      </h:ul>
      <h:p/>
      This Base-PP is valid because email clients are a specific type of software application.
    </sec:Overview>
    <tech-terms>
      <suppress>
        Distributed TOE
      </suppress>
      <term full="ActiveSync">
        Microsoft protocol for synchronizing messaging and calendar data between
          mobile clients and email servers.
      </term>
      <term full="Add-on">
        Capability or functionality added to an application including plug-ins,
          extensions or other controls.
      </term>
      <term full="Email Client">
        Application used to send, receive, access and manage email provided by an
          email server. The terms email client and TOE are interchangeable in this
          document.
      </term>
      <term full="Internet Message Access Protocol" abbr="IMAP">
        Protocol for an email client to retrieve
          email from an email server over TCP/IP; IMAP4 defined in RFC 3501.
      </term>
      <term full="Messaging Application Programming Interface" abbr="MAPI">
        Open specification used by
          email clients such as Microsoft Outlook and Thunderbird; defined in
        <xref to="bibmapispec"/>
        .
      </term>
      <term full="Post Office Protocol" abbr="POP">
        Protocol for an email client to retrieve email from
          an email server over TCP/IP; POP3 defined in RFC 1939.
      </term>
      <term full="Remote Procedure Call" abbr="RPC">
        Protocol used by Microsoft Exchange to send/receive
          MAPI commands; defined in
        <xref to="MS-OXCRPC"/>
        .
      </term>
      <term full="Secure/Multipurpose Internet Mail Extensions" abbr="S/MIME">
        Used to sign
          or encrypt messages at the request of the user upon sending email and to verify
          digital signature on a signed message upon receipt.
      </term>
      <term full="Simple Mail Transfer Protocol" abbr="SMTP">
        Protocol for an email client to send email
          to an email server over TCP/IP; SMTP defined in RFC 5321.
      </term>
      <term full="Advanced Encryption Standard" abbr="AES"/>
      <term full="Cipher Block Chaining" abbr="CBC"/>
      <term full="Cryptographic Message Syntax" abbr="CMS"/>
      <term full="Certificate Revocation List" abbr="CRL"/>
      <term full="Critical Security Parameter" abbr="CSP"/>
      <term full="Galois-Counter Mode" abbr="GCM"/>
      <term full="Mail Transfer Agent" abbr="MTA"/>
      <term full="Password-Based Key Derivation Function" abbr="PBKDF"/>
      <term full="Portable Document Format" abbr="PDF"/>
      <term full="Pseudorandom Function" abbr="PRF"/>
      <term full="Simple Authentication and Security Layer" abbr="SASL"/>
      <term full="Uniform Resource Identifier" abbr="URI"/>
    </tech-terms>
    <section title="Compliant Targets of Evaluation" id="TOEdescription">
      The Target of Evaluation  (TOE) in this PP-Module is an email client application running on a desktop or mobile operating system.
      <h:p/>
      The complexity of email content and email clients has grown over time.
      Modern email clients can render HTML as well as plaintext,
      and may include functionality to display common attachment formats, such as Adobe PDF and  Microsoft Word documents.
      Some email clients allow their functionality to be modified by users through the addition of add-ons.
      Protocols have also been defined for communicating between email clients and servers.
      Some clients support multiple protocols for doing the same task,
      allowing them to be configured according to email server specifications.
      <h:p/>
      The complexity and rich feature set of modern email clients make them a target for attackers, which introduces
      security concerns. This document is intended to facilitate the improvement of email client
      security by requiring use of operating system security services, cryptographic standards, and
      environmental mitigations. Additionally, the requirements in this document define acceptable
      behavior for email clients regardless of the security features provided by the operating
      system.
      <h:p/>
      This Module along with the Protection Profile for Application
      Software
      <xref to="bibAppPP"/>
      provides a baseline set of Security Functional
      Requirements (SFRs) for email clients running on any operating system regardless of the
      composition of the underlying platform.
      <sec:TOE_Boundary>
        The physical boundary of the email client is a software application running on a general-purpose operating system. The TOE boundary may include third-party add-ons, but these are non-interfering with respect to security;
        add-ons provide features that are outside the TOE's logical boundary but must be implemented in such a manner that their inclusion does not compromise the security of the TSF.
        <xref to="mua_mta"/>
        shows the TOE's interaction with
        remote external interfaces that are used to transfer mail between clients. Two separate email clients are shown to illustrate how the TOE can function as both a sender and a receiver using different protocols.
        <figure id="mua_mta" entity="images/mua_mta.png" max-width="inherit" title="Sending and Delivering Email over TLS"/>
      </sec:TOE_Boundary>
    </section>
    <sec:Use_Cases>
      Email clients perform tasks associated primarily with
    the following use case.
      <usecases>
        <usecase title="Sending, receiving, accessing, managing, and viewing email" id="usecase1">
          <description>
            Email clients are used for sending, receiving, viewing, accessing, and managing
      email in coordination with a mail server. Email clients can render HTML as well as
      plaintext, and can display common attachment formats.
          </description>
        </usecase>
      </usecases>
    </sec:Use_Cases>
  </sec:Introduction>
  <sec:Conformance_Claims boilerplate="no">
    <CClaimsInfo cc-version="cc-2022r1" cc-approach="direct-rationale">
      <cc-st-conf>
        exact
      </cc-st-conf>
      <cc-pt2-conf>
        extended
      </cc-pt2-conf>
      <cc-pt3-conf>
        extended
      </cc-pt3-conf>
      <cc-pp-conf/>
      <cc-pp-config-with>
        <PP-cc-ref>
          Protection Profile for Application Software, Version 2.0
        </PP-cc-ref>
      </cc-pp-config-with>
      <cc-pkg-claim/>
    </CClaimsInfo>
  </sec:Conformance_Claims>
  <!-- 3.0 Security Problem Definition-->
  <sec:Security_Problem_Definition>
    The security problem is described in terms of the threats that the email client is expected to address, assumptions about the operational environment, 
      and any organizational security policies that it is expected to enforce.
    <!-- 3.1 Threats -->
    <sec:Threats>
      <threats>
        <threat name="T.FLAWED_ADDON">
          <description>
            Email client functionality can be extended with integration of third-partyutilities and tools. This expanded set of capabilities is made possible via the use ofadd-ons. The tight integration between the basic email client code and the newcapabilities that add-ons provide increases the risk that malefactors could injectserious flaws into the email client application, either maliciously by an attacker, oraccidentally by a developer. These flaws enable undesirable behaviors including, but notlimited to, allowing unauthorized access to sensitive information in the email client,unauthorized access to the device's file system, or privilege escalation thatenables unauthorized access to other applications or the operating system.
          </description>
          <!-- New mapping to build updated threat mapping table. -->
          <addressed-by>
            FDP_NOT_EXT.1
          </addressed-by>
          <rationale>
            FDP_NOT_EXT.1 mitigates the threat by defining a mechanism for users to determine whether a given email has been signed or encrypted.
          </rationale>
          <addressed-by>
            FDP_NOT_EXT.2
          </addressed-by>
          <rationale>
            FDP_NOT_EXT.2 mitigates the threat by optionally requiring the TSF to enumerate the uniform resource identifier (URI) of embedded links in emails so that a user can determine the source of the link.
          </rationale>
          <addressed-by>
            FDP_REN_EXT.1
          </addressed-by>
          <rationale>
            FDP_REN_EXT.1 mitigates the threat by optionally defining a plaintext-only operational mode that does not allow a user to interact with embedded content in an email message.
          </rationale>
          <addressed-by>
            FMT_SMF.1/EmailClient
          </addressed-by>
          <rationale>
            FMT_SMF_EXT.1/EmailClient mitigates the threat by defining the technology-specific management functions that may exist for email client applications.
          </rationale>
          <addressed-by>
            FPT_AON_EXT.1
          </addressed-by>
          <rationale>
            FPT_AON_EXT.1 mitigates the threat by specifying whether or not the TSF has the ability to load add-ons.
          </rationale>
          <addressed-by>
            FPT_AON_EXT.2
          </addressed-by>
          <rationale>
            FPT_AON_EXT.2 mitigates the threat by defining a cryptographic method for the TSF to validate the integrity of add-ons if the TOE supports their use.
          </rationale>
        </threat>
        <threat name="T.NETWORK_ATTACK">
          <description></description>
          <!-- New mapping to build updated threat mapping table. -->
          <addressed-by>
            FCS_CKM_EXT.1
          </addressed-by>
          <rationale>
            FCS_CKM_EXT.1 mitigates the threat by requiring that the TSF provide or invoke a cryptographic function for asymmetric key generation.
          </rationale>
          <addressed-by>
            FCS_RBG_EXT.1
          </addressed-by>
          <rationale>
            FCS_RBG_EXT.1 mitigates the threat by requiring that the TSF provide or invoke a DRBG for secure key generation.
          </rationale>
          <addressed-by>
            FCS_SMIME_EXT.1
          </addressed-by>
          <rationale>
            FCS_SMIME_EXT.1 mitigates the threat by defining the TOE's cryptographic implementation of S/MIME to both assert and validate the confidentiality and integrity of secure email messages.
          </rationale>
          <addressed-by>
            FDP_NOT_EXT.1
          </addressed-by>
          <rationale>
            FDP_NOT_EXT.1 mitigates the threat by defining a mechanism for users to determine whether a given email has been signed or encrypted.
          </rationale>
          <addressed-by>
            FDP_NOT_EXT.2
          </addressed-by>
          <rationale>
            FDP_NOT_EXT.2 mitigates the threat by optionally requiring the TSF to enumerate the uniform resource identifier (URI) of embedded links in emails so that a user can determine the source of the link.
          </rationale>
          <addressed-by>
            FDP_REN_EXT.1
          </addressed-by>
          <rationale>
            FDP_REN_EXT.1 mitigates the threat by optionally defining a plaintext-only operational mode that does not allow a user to interact with embedded content in an email message.
          </rationale>
          <addressed-by>
            FDP_SMIME_EXT.1
          </addressed-by>
          <rationale>
            FDP_SMIME_EXT.1 mitigates the threat by requiring the TSF to use S/MIME to protect email message data in transit.
          </rationale>
          <addressed-by>
            FIA_SASL_EXT.1
          </addressed-by>
          <rationale>
            FIA_SASL_EXT.1 mitigates the threat by specifying how SASL is implemented in the case where the TOE claims to support it.
          </rationale>
          <addressed-by>
            FIA_X509_EXT.1
          </addressed-by>
          <rationale>
            FIA_X509_EXT.1 mitigates the threat by requiring the TSF to implement or invoke an X.509 certificate validation service.
          </rationale>
          <addressed-by>
            FIA_X509_EXT.2/SMIME
          </addressed-by>
          <rationale>
            FIA_X509_EXT.2/SMIME mitigates the threat by requiring the TSF to support the use of X.509 certificates for S/MIME.
          </rationale>
          <addressed-by>
            FMT_SMF.1/EmailClient
          </addressed-by>
          <rationale>
            FMT_SMF.1/EmailClient mitigates the threat by defining the technology-specific management functions that may exist for email client applications.
          </rationale>
          <addressed-by>
            FTP_DIT_EXT.1
          </addressed-by>
          <rationale>
            FTP_DIT_EXT.1 mitigates the threat by specifying the trusted communications channels used by the TOE to protect data in transit.
          </rationale>
          <addressed-by>
            FTP_ITC.1
          </addressed-by>
          <rationale>
            FTP_ITC.1 mitigates the threat by specifying the trusted communications the TSF must implement that are specific to email communications.
          </rationale>
        </threat>
        <threat name="T.NETWORK_EAVESDROP">
          <description></description>
          <!-- New mapping to build updated threat mapping table. -->
          <addressed-by>
            FCS_CKM_EXT.1
          </addressed-by>
          <rationale>
            FCS_CKM_EXT.1 mitigates the threat by requiring that the TSF provide or invoke a cryptographic function for asymmetric key generation.
          </rationale>
          <addressed-by>
            FCS_RBG_EXT.1
          </addressed-by>
          <rationale>
            FCS_RBG_EXT.1 mitigates the threat by requiring that the TSF provide or invoke a DRBG for secure key generation.
          </rationale>
          <addressed-by>
            FCS_SMIME_EXT.1
          </addressed-by>
          <rationale>
            FCS_SMIME_EXT.1 mitigates the threat by defining the TOE's cryptographic implementation of S/MIME to both assert and validate the confidentiality and integrity of secure email messages.
          </rationale>
          <addressed-by>
            FDP_NOT_EXT.1
          </addressed-by>
          <rationale>
            FDP_NOT_EXT.1 mitigates the threat by defining a mechanism for users to determine whether a given email has been signed or encrypted.
          </rationale>
          <addressed-by>
            FDP_NOT_EXT.2
          </addressed-by>
          <rationale>
            FDP_NOT_EXT.2 mitigates the threat by optionally requiring the TSF to enumerate the uniform resource identifier (URI) of embedded links in emails so that a user can determine the source of the link.
          </rationale>
          <addressed-by>
            FDP_REN_EXT.1
          </addressed-by>
          <rationale>
            FDP_REN_EXT.1 mitigates the threat by optionally defining a plaintext-only operational mode that does not allow a user to interact with embedded content in an email message.
          </rationale>
          <addressed-by>
            FDP_SMIME_EXT.1
          </addressed-by>
          <rationale>
            FDP_SMIME_EXT.1 mitigates the threat by requiring the TSF to use S/MIME to protect email message data in transit.
          </rationale>
          <addressed-by>
            FIA_SASL_EXT.1
          </addressed-by>
          <rationale>
            FIA_SASL_EXT.1 mitigates the threat by specifying how SASL is implemented in the case where the TOE claims to support it.
          </rationale>
          <addressed-by>
            FIA_X509_EXT.1
          </addressed-by>
          <rationale>
            FIA_X509_EXT.1 mitigates the threat by requiring the TSF to implement or invoke an X.509 certificate validation service.
          </rationale>
          <addressed-by>
            FIA_X509_EXT.2/SMIME
          </addressed-by>
          <rationale>
            FIA_X509_EXT.2/SMIME mitigates the threat by requiring the TSF to support the use of X.509 certificates for S/MIME.
          </rationale>
          <addressed-by>
            FMT_SMF.1/EmailClient
          </addressed-by>
          <rationale>
            FMT_SMF.1/EmailCLient mitigates the threat by defining the technology-specific management functions that may exist for email client applications.
          </rationale>
          <addressed-by>
            FTP_DIT_EXT.1
          </addressed-by>
          <rationale>
            FTP_DIT_EXT.1 mitigates the threat by specifying the trusted communications channels used by the TOE to protect data in transit.
          </rationale>
          <addressed-by>
            FTP_ITC.1
          </addressed-by>
          <rationale>
            FTP_ITC.1 mitigates the threat by specifying the trusted communications the TSF must implement that are specific to email communications.
          </rationale>
        </threat>
        <threat name="T.PHYSICAL_ACCESS">
          <description></description>
          <!-- New mapping to build updated threat mapping table. -->
          <addressed-by>
            FCS_CKM_EXT.3
          </addressed-by>
          <rationale>
            FCS_CKM_EXT.3 mitigates the threat by defining the mechanism by which the TSF protects stored key data from unauthorized disclosure.
          </rationale>
          <addressed-by>
            FCS_CKM_EXT.5
          </addressed-by>
          <rationale>
            FCS_CKM_EXT.5 mitigates the threat by optionally defining the mechanism by which the TSF can derive key material using a user-supplied password credential.
          </rationale>
          <addressed-by>
            FCS_CKM.6
          </addressed-by>
          <rationale>
            FCS_CKM.6 mitigates the threat by defining the mechanism by which the TSF securely destroys stored key data.
          </rationale>
          <addressed-by>
            FCS_COP_EXT.2
          </addressed-by>
          <rationale>
            FCS_COP_EXT.2 mitigates the threat by defining the supported key wrap mechanisms if the TSF uses key wrapping as part of maintaining a key chain.
          </rationale>
          <addressed-by>
            FCS_IVG_EXT.1
          </addressed-by>
          <rationale>
            FCS_IVG_EXT.1 mitigates the threat by optionally specifying the initialization vectors used for various cryptographic modes if the TOE supports any of these modes.
          </rationale>
          <addressed-by>
            FCS_KYC_EXT.1
          </addressed-by>
          <rationale>
            FCS_KYC_EXT.1 mitigates the threat by defining any key chain that the TSF implements to protect a root encryption key.
          </rationale>
          <addressed-by>
            FCS_NOG_EXT.1
          </addressed-by>
          <rationale>
            FCS_NOG_EXT.1 mitigates the threat by optionally defining the minimum nonce size if the TSF uses any cryptographic algorithms that require the use of nonces.
          </rationale>
          <addressed-by>
            FCS_SAG_EXT.1
          </addressed-by>
          <rationale>
            FCS_SAG_EXT.1 mitigates the threat by optionally defining the supported methods for salt generation if the TSF uses any cryptographic algorithms that require the use of salts.
          </rationale>
          <addressed-by>
            FCS_SMC_EXT.1
          </addressed-by>
          <rationale>
            FCS_SMC_EXT.1 mitigates the threat by defining the supported key combination mechanisms if the TSF uses key combining as part of maintaining a key chain.
          </rationale>
          <addressed-by>
            FDP_PST_EXT.1
          </addressed-by>
          <rationale>
            FDP_PST_EXT.1 mitigates the threat by optionally defining the ability of the TOE to operate without persistently storing certain types of data at all.
          </rationale>
        </threat>
      </threats>
    </sec:Threats>
    <!-- 3.2 Assumptions -->
    <sec:Assumptions>
      <assumptions/>
    </sec:Assumptions>
    <!-- 3.3 Organizational Security Policies -->
    <sec:Organizational_Security_Policies>
      <OSPs/>
    </sec:Organizational_Security_Policies>
  </sec:Security_Problem_Definition>
  <!-- 4.0 Security Objectives -->
  <sec:Security_Objectives>
    <!-- 4.1 Security Objectives for the TOE -->
    <!-- 4.2 Security Objctives for the Operational Environment -->
    <sec:Security_Objectives_for_the_Operational_Environment>
      <SOEs/>
    </sec:Security_Objectives_for_the_Operational_Environment>
    <!-- 4.3 Security Objectives Rationale -->
    <sec:Security_Objectives_Rationale/>
  </sec:Security_Objectives>
  <!-- 5.0 Security Requirements -->
  <sec:Security_Requirements title="Security Requirements">
    <!-- 5.1 App PP Security Functional Requirements Direction -->
    <base-pp id="AppPP" name="Application Software" product="Application" short="App" version="2.0">
      <git>
        <url>
          https://github.com/commoncriteria/application
        </url>
        <branch>
          release-2.0
        </branch>
      </git>
      <url>
        https://github.com/commoncriteria/application
      </url>
      <sec-func-req-dir/>
      <!-- 5.1.1 Modified SFRs -->
      <modified-sfrs/>
      <!-- 5.1.2 Additional SFRs -->
      <additional-sfrs/>
      <con-toe>
        If this PP-Module is used to extend the App PP, the TOE type for the overall TOE is still a software application.
        The TOE boundary is simply extended to include the email client functionality that is built into the application so that additional security functionality is claimed within the scope of the TOE.
        
        The only asset for the TOE is the software executable and sensitive data that comprises the TOE. The entire TOE as defined by the combination of the
        Base-PP and this PP-Module is a single asset. The only difference to the threat model is that the PP-Module introduces the concept of add-ons, which
        introduces the threat of an add-on being flawed in some way.
      </con-toe>
      <con-sec-prob>
        Listed below are the threats, objectives, and OSPs defined in this PP-Module with rationale for their consistency with the App PP.
        The PP-Module shares the
        executable application asset with the App PP but defines an additional threat because the PP-Module defines a specific type of software application
        with potential exploits that are common to the application type.
        
        Note that the PP-Module is implicitly consistent with any claimed functional packages because the applicable functional packages do not have
        security problem definitions of their own; per section 2, any claimed functional package is intended to support the O.PROTECTED_COMMS objective in the
        App PP, which helps mitigate the T.NETWORK_ATTACK and T.NETWORK_EAVESDROP threats in that PP.
      </con-sec-prob>
      <con-obj>
        Listed below are the security objectives defined in this PP-Module with rationale for their consistency with the App PP. The PP-Module 
        extends the Base-PP security objectives because the PP-Module defines a specific type of software application
        with security functionality that is common to the application type.
        
        Note that the PP-Module is implicitly consistent with any claimed functional packages because the applicable functional packages do not have
        TOE objectives of their own; per section 2, any claimed functional package is intended to support the O.PROTECTED_COMMS objective in the
        App PP.
      </con-obj>
      <con-op-en>
        This PP-Module does not define any objectives for the TOE's operational environment.
      </con-op-en>
      <con-mod ref="QQQQ"/>
    </base-pp>
    <!-- 5.2 TOE Security Functional Requirements -->
    <man-sfrs>
      <!-- 5.2.1 Cryptographic Support (FCS) -->
      <section title="Cryptographic Support (FCS)" id="fcs">
        <ext-comp-def title="Cryptographic Key Management" fam-id="FCS_CKM_EXT">
          <fam-behavior>
            Components in this family define requirements for cryptographic key management beyond those which are specified in the Part 2 family FCS_CKM.
          </fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Cryptographic Key Chaining" fam-id="FCS_KYC_EXT">
          <fam-behavior>
            Components in this family define requirements for protection of cryptographic key data through its storage in a hierarchical key chain.
          </fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Secure/Multipurpose Internet Mail Extensions (S/MIME)" fam-id="FCS_SMIME_EXT">
          <fam-behavior>
            Components in this family define requirements for the secure implementation of S/MIME.
          </fam-behavior>
        </ext-comp-def>
        <!-- FCS_CKM.6 Cryptographic Key Destruction -->
        <f-component cc-id="fcs_ckm.6" id="fcs-ckm-6" name="Cryptographic Key Destruction">
          <consistency-rationale>
            This SFR defines how email messages are formatted when sent and received by the
			client. It does not impact the Base-PP functionality.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to identify the method that it uses to destroy key data.
          </comp-lev>
          <f-element id="fcs-ckm-6-1">
            <title>
              The TSF shall destroy
              <assignable>
                list of cryptographic keys (including keying material)
              </assignable>
              when
              <selectables>
                <selectable id="fcs_ckm.6.1_2">
                  no longer needed
                </selectable>
                <selectable id="fcs_ckm.6.1_4">
                  <assignable>
                    other circumstances for key or keying material destructions.
                  </assignable>
                </selectable>
              </selectables>
            </title>
            <aactivity level="component">
              <TSS>
                If the platform provides the key destruction, then the evaluator shall verify that the TSS describes how
			the key destruction functionality is invoked.
                <h:p/>
                If "destruction of reference..." (for volatile memory) is selected, then the evaluator shall ensure that
			the relevant interface definition supports the selection and description in the TSS.
                <h:p/>
                If the application invokes key destruction, the evaluator shall ensure the TSS describes each of the secret 
			keys (keys used for symmetric encryption or data authentication), private keys, and critical security
			parameters (CSPs) used to generate keys; when they are zeroized (for example, immediately after use, on
			system shutdown, etc.); and the type of zeroization procedure that is performed (overwrite with zeroes,
			overwrite three times with random pattern, etc.). If different types of memory are used to store the materials 
			to be protected, the evaluator shall ensure that the TSS describes the zeroization procedure in terms of 
			the memory in which the data are stored (for example, "secret keys stored on a drive are zeroized by
			overwriting once with zeros, while secret keys stored on the internal hard drive are zeroized by overwriting 
			three times with a random pattern that is changed before each write").
                <h:p/>
              </TSS>
              <Guidance/>
              <Tests>
                If the TSF performs its own key destruction, the evaluator shall perform the following test:
                <testlist>
                  <test>
                    For each type of authorization service, encryption mode, and encryption operation, a known authorization factor
		and chain of keys must be provided to the evaluator with an associated ciphertext data set (e.g., if a passphrase
		is used to create an intermediate key, then the ciphertext containing the encrypted key as well as the intermediate
		key itself must be provided to the evaluator). The evaluator shall use the email client in conjunction with a
		debugging or forensics utility to attempt to authorize themselves, resulting in the generation of a key or
		decryption of a key. The evaluator shall ascertain from the TSS what the vendor defines as "no longer needed" 
		and execute the sequence of actions via the email client to invoke this state. At this point, the evaluator 
		shall dump the volatile memory and search the retrieved dump for the provided authorization credentials or keys 
		(e.g., if the password was "PaSSw0rd," perform a string search of the forensics dump for "PaSSw0rd"). 
		The evaluator shall document each command, program, or action taken during this process, and must confirm that
		no plaintext keying material resides in volatile memory. The evaluator shall perform this test three times to
		ensure repeatability. If during the course of this testing the evaluator finds that keying material remains in
		volatile memory, they should be able to identify the cause (i.e., execution of the grep command for "PaSSw0rd" 
		caused a false positive) and document the reason for failure to comply with this requirement. 
		The evaluator shall repeat this same test, but looking for keying material in non-volatile memory.
                  </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
          <f-element id="fcs-ckm-6-2">
            <title>
              The TSF shall
              <selectables>
                <selectable id="fcs_ckm.6.2_1">
                  <h:b>
                    destroy
                  </h:b>
                </selectable>
                <selectable id="fcs_ckm.6.2_2">
                  <h:b>
                    invoke platform-provided functionality to destroy
                  </h:b>
                </selectable>
              </selectables>
              cryptographic keys and keying material specified by FCS_CKM.6.1 in accordance with a specified cryptographic key destruction method
              <selectables linebreak="yes">
                <selectable id="fcs_ckm.6.2_3">
                  for volatile memory, a single direct overwrite of
                  <selectables>
                    <selectable id="fcs_ckm.6.2_4">
                      zeroes
                    </selectable>
                    <selectable id="fcs_ckm.6.2_5">
                      a pseudo-random pattern generated by the TOE's DRBG
                    </selectable>
                    <selectable id="fcs_ckm.6.2_6">
                      a pseudo-random pattern generated by the host platform's DRBG
                    </selectable>
                  </selectables>
                </selectable>
                <selectable id="fcs_ckm.6.2_7">
                  for non-volatile memory, a
                  <selectables>
                    <selectable id="fcs_ckm.6.2_8">
                      single
                    </selectable>
                    <selectable id="fcs_ckm.6.2_9">
                      three or more times
                    </selectable>
                  </selectables>
                  overwrite of key data consisting of
                  <selectables>
                    <selectable id="fcs_ckm.6.2_10">
                      a static pattern
                    </selectable>
                    <selectable id="fcs_ckm.6.2_11">
                      a pseudo-random pattern generated by the TOE's DRBG
                    </selectable>
                    <selectable id="fcs_ckm.6.2_12">
                      a pseudo-random pattern generated by the host platform's DRBG
                    </selectable>
                  </selectables>
                </selectable>
              </selectables>
              that meets the following:
              <selectables>
                <selectable id="fcs_ckm.6.2_13">
                  NIST SP 800-88
                </selectable>
                <selectable id="fcs_ckm.6.2_14">
                  no standard
                </selectable>
              </selectables>
            </title>
            <ext-comp-def-title>
              <title>
                The TSF shall
                <assignable>
                  key destruction method
                </assignable>
                that meets the following:
                <selectables linebreak="yes">
                  <selectable>
                    NIST SP 800-88
                  </selectable>
                  <selectable>
                    no standard
                  </selectable>
                </selectables>
                for destroying all keying material and cryptographic security parameters when no longer needed.
              </title>
            </ext-comp-def-title>
            <note role="application">
              For the purpose of this requirement, keying material refers to
			authentication data, passwords, symmetric keys, data used to derive keys, etc.
              <h:p/>
              The destruction indicated above applies to each intermediate storage area for
			  keys and cryptographic critical security parameters (i.e., any storage, such as memory
			  buffers, that is included in the path of such data) upon the transfer of the
			  keys and cryptographic critical security parameter to another memory location.
            </note>
          </f-element>
        </f-component>
        <!-- FCS_CKM_EXT.3 Protection of Key and Key Material -->
        <f-component cc-id="fcs_ckm_ext.3" id="fcs-ckm-ext-3" name="Protection of Key and Key Material">
          <consistency-rationale>
            This SFR defines how keys and key material are saved by the email client. It does not impact the Base-PP functionality.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to identify the method that it uses to prevent the plaintext storage of secret key data.
          </comp-lev>
          <management>
            No specific management functions are identified.
          </management>
          <audit>
            There are no auditable events foreseen.
          </audit>
          <dependencies>
            No dependencies.
          </dependencies>
          <f-element id="fcs-ckm-ext-3-1">
            <title>
              The TSF shall
              <selectables>
                <selectable id="fcs_ckm_ext.3.1_1">
                  not store keys in non-volatile memory
                </selectable>
                <selectable id="ckm3_wrapped1">
                  only store keys in non-volatile memory when wrapped as specified in FCS_COP_EXT.2 unless the key meets any one of following criteria:
                  <selectables linebreak="yes">
                    <selectable id="fcs_ckm_ext.3.1_2">
                      The plaintext key is not part of the key chain as specified in FCS_KYC_EXT.1
                    </selectable>
                    <selectable id="fcs_ckm_ext.3.1_3">
                      The plaintext key will no longer provide access to the encrypted data after initial provisioning
                    </selectable>
                    <selectable id="ckm3_combined">
                      The plaintext key is a key split that is combined as specified in FCS_SMC_EXT.1, and the other half of the key split is either
                      <selectables>
                        <selectable id="ckm3_wrapped2">
                          wrapped as specified in FCS_COP_EXT.2
                        </selectable>
                        <selectable id="fcs_ckm_ext.3.1_4">
                          derived and not stored in non-volatile memory
                        </selectable>
                      </selectables>
                    </selectable>
                    <selectable id="fcs_ckm_ext.3.1_5">
                      The plaintext key is stored on an external storage device for use as an authorization factor
                    </selectable>
                    <selectable id="ckm3_wrapped3">
                      The plaintext key is used to wrap a key as specified in FCS_COP_EXT.2 that is already wrapped as specified in FCS_COP_EXT.2
                    </selectable>
                    <selectable id="fcs_ckm_ext.3.1_6">
                      The plaintext key is the public portion of the key pair
                    </selectable>
                  </selectables>
                </selectable>
              </selectables>
              .
            </title>
            <ext-comp-def-title>
              <title>
                The TSF shall
                <assignable>
                  method of ensuring plaintext key data is not stored in non-volatile memory
                </assignable>
                .
              </title>
            </ext-comp-def-title>
            <note role="application">
              This SFR references the selection-based SFRs FCS_COP_EXT.2 and FCS_SMC_EXT.1. If
			any selection that references these SFRs is chosen, the ST must also claim that selection-based SFR.
              <h:p/>
              The plaintext key storage in non-volatile memory is allowed for
	      several reasons. If the keys exist within protected memory that is not user accessible
	      on the email client or operational environment, the only methods that allow it to play
	      a security relevant role is if it is a key split or providing additional layers of
	      wrapping or encryption on keys that have already been protected.
            </note>
            <aactivity level="component">
              <TSS>
                The evaluator shall verify the TSS includes a high-level description of the method used to protect keys 
			stored in non-volatile memory.
                <h:p/>
                The evaluator shall ensure that the TSS describes the storage location of all keys and the protection of 
			all keys stored in non-volatile memory. The evaluator shall ensure that the description of the key chain
			follows FCS_COP_EXT.2 for the storage of wrapped or encrypted keys in non-volatile memory and plaintext 
			keys in non-volatile memory meet one of the criteria for storage.
              </TSS>
              <Guidance/>
              <Tests/>
            </aactivity>
          </f-element>
        </f-component>
        <!-- FCS_KYC_EXT.1 Key Chaining -->
        <f-component cc-id="fcs_kyc_ext.1" id="fcs-kyc-ext-1" name="Key Chaining">
          <consistency-rationale>
            This SFR defines how email clients maintain key chains.
	      It does not impact the Base-PP functionality.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to identify the method that it uses to prevent the plaintext storage of secret key data.
          </comp-lev>
          <f-element id="fcs-kyc-ext-1-1">
            <title>
              The TSF shall maintain a key chain of:
              <selectables linebreak="yes">
                <selectable id="fcs_kyc_ext.1.1_1">
                  one
                </selectable>
                <selectable id="fcs_kyc_ext.1.1_2">
                  a key stored in platform key storage
                </selectable>
                <selectable id="fcs_kyc_ext.1.1_3">
                  intermediate keys originating from:
                  <selectables linebreak="yes">
                    <selectable id="kyc1_password">
                      a password as specified in FCS_CKM_EXT.5
                    </selectable>
                    <selectable id="fcs_kyc_ext.1.1_4">
                      one or more other authorization factors
                    </selectable>
                    <selectable id="fcs_kyc_ext.1.1_5">
                      credentials stored in platform key storage
                    </selectable>
                  </selectables>
                </selectable>
              </selectables>
              to the data encryption and decryption keys using the following
	      methods:
              <selectables linebreak="yes">
                <selectable id="fcs_kyc_ext.1.1_6">
                  use of the platform key storage
                </selectable>
                <selectable id="fcs_kyc_ext.1.1_7">
                  use of platform key storage that performs key wrap with a TSF provided key
                </selectable>
                <selectable id="kyc1_wrapped">
                  implement key wrapping as specified in FCS_COP_EXT.2
                </selectable>
                <selectable id="kyc1_combined">
                  implement key combining as specified in FCS_SMC_EXT.1
                </selectable>
              </selectables>
              while maintaining an effective strength of 256 bits.
            </title>
            <ext-comp-def-title>
              <title>
                The TSF shall maintain a key chain of:
                <assignable>
                  key hierarchy
                </assignable>
                to the data encryption and decryption keys using the following methods:
                <assignable>
                  key protection method
                </assignable>
                while maintaining an effective strength of
                <assignable>
                  key strength
                </assignable>
              </title>
            </ext-comp-def-title>
            <note role="application">
              This SFR references the selection-based SFRs FCS_CKM_EXT.5, FCS_COP_EXT.2, and 
			FCS_SMC_EXT.1. If any selection that references one of these SFRs is chosen, the ST must also claim that 
			selection-based SFR.
              <h:p/>
              Key Chaining is the method of using multiple layers of
	      encryption keys to ultimately secure the data encryption key. The number of
	      intermediate keys will vary. This applies to all keys that contribute to the ultimate
	      wrapping or derivation of the data encryption key; including those in protected areas.
	      This requirement also describes how keys are stored.
            </note>
            <aactivity level="component">
              <TSS>
                The evaluator shall verify that the TSS* includes a high-level description of the key hierarchy for all 
		  authorization methods that are used to protect the encryption keys. 
		  The evaluator shall ensure that the TSS describes the key chain in detail. The evaluator shall ensure that 
		  the description of the key chain maintains a chain of keys using key wrap that meets FCS_COP_EXT.2.
                <h:p/>
                The evaluator shall verify that the TSS* describes how the process of the key chain functions, such that it
		  does not expose any material that might compromise any key in the chain. A high-level description should 
		  include a diagram illustrating the key hierarchy implemented and detail where all keys and keying material
		  is stored or what it is derived from. The evaluator shall ensure that at no point does the key hierarchy allow 
		  for the chain could be broken without a cryptographic exhaust or knowledge of the key within the chain, and
		  the effective strength of the data encryption key is maintained throughout the key chain.
                <h:p/>
                *If necessary, this information may be presented in a proprietary document rather than the TSS.
              </TSS>
              <Guidance/>
              <Tests/>
            </aactivity>
          </f-element>
        </f-component>
        <!-- FCS_SMIME_EXT.1 Secure/Multipurpose Internet Mail Extensions (S/MIME) -->
        <f-component cc-id="fcs_smime_ext.1" id="fcs-smime-ext-1" name="Secure/Multipurpose Internet Mail Extensions (S/MIME)">
          <consistency-rationale>
            This SFR defines how email messages are formatted when sent and received by the client.
	      It does not impact the Base-PP functionality.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to implement S/MIME in accordance with appropriate RFCs and using appropriate
			cryptographic functionality.
          </comp-lev>
          <management>
            The following actions could be considered for the management functions in FMT:
            <h:ul>
              <h:li>
                Configure message sending and receiving to only use specified cryptographic algorithms.
              </h:li>
            </h:ul>
          </management>
          <dependencies>
            <no-link>
              FCS_COP.1
            </no-link>
            Cryptographic Operation
            <h:p/>
            <no-link>
              FIA_X509_EXT.1
            </no-link>
            X.509 Certificate Validation
          </dependencies>
          <f-element id="fcs-smime-ext-1-1">
            <title>
              The TSF shall implement both a sending and receiving S/MIME v4.0 Agent as defined in RFC 8551, 
			using CMS as defined in RFCs 5652, 5754, and 3565.
            </title>
            <note role="application">
              The RFCs allow for an agent to be either sending or receiving, or to include both
			capabilities. The intent of this requirement is to ensure that the email client is capable of both sending 
			and receiving S/MIME v4.0 messages.
            </note>
            <aactivity level="component">
              <TSS>
                The evaluator shall verify that the version of S/MIME implemented by the email client is present in the
			  TSS. The evaluator shall also verify that the algorithms supported are specified, and that the algorithms 
			  specified are those listed for this component.
                <h:p/>
                The evaluator shall verify that the TSS describes the ContentEncryptionAlgorithmIdentifier and whether 
			  the required behavior is performed by default or may be configured.
                <h:p/>
                The evaluator shall verify that the TSS describes the digestAlgorithm and whether the required behavior
			  is performed by default or may be configured.
                <h:p/>
                The evaluator shall verify that the TSS describes the AlgorithmIdentifier and whether the required
			  behavior is performed by default or may be configured.
                <h:p/>
                The evaluator shall verify that the TSS describes the retrieval mechanisms for both certificates
			  and certificate revocation, as well as the frequency at which these mechanisms are implemented.
              </TSS>
              <Guidance>
                The evaluator shall ensure that the operational guidance contains instructions on configuring the email 
				client such that it complies with the description in the TSS.
                <h:p/>
                If the TSS indicates that the algorithms in FCS_SMIME_EXT.1.2 must be configured to meet the 
				requirement, the evaluator shall verify that the operational guidance includes the configuration of
				this ID.
                <h:p/>
                If the TSS indicates that the algorithms in FCS_SMIME_EXT.1.3 must be configured to meet the 
				requirement, the evaluator shall verify that the operational guidance includes the configuration.
                <h:p/>
                If the TSS indicates that the algorithms in FCS_SMIME_EXT.1.4 must be configured to meet the
				requirement, the evaluator shall verify that the operational guidance includes the configuration of
				this ID.
                <h:p/>
                If the TSS indicates that the mechanisms in FCS_SMIME_EXT.1.7 are configurable, the evaluator shall
				verify that the operational guidance includes the configuration of these mechanisms.
              </Guidance>
              <Tests>
                The evaluator shall perform the tests listed below. These tests can be performed in conjunction with the tests specified in FIA_X509_EXT.1 (defined in the Base-PP) for certificate and certificate chain verification and in FDP_NOT_EXT.1.
                <h:p/>
                <testlist>
                  <test>
                    The evaluator shall both send and receive a message with no protection (no signature or encryption)
					and verify that the message is transmitted properly and can be viewed at the receiving agent. This 
					transmission can be performed as part of a number of mechanisms; it is sufficient to observe that the
					message arrives at the intended recipient with the same content as when sent.
                  </test>
                  <test>
                    The evaluator shall both send and receive a signed message using each of the algorithms specified
					in the ST corresponding to the requirement and verify that the signature is valid for both sent and
					received messages. After verifying the signatures are valid, the evaluator shall send a signed
					message using each of the algorithms specified in the ST and use a man-in-the-middle tool to modify 
					at least one byte of the message such that the signature is no longer valid. This can be done by
					modifying the content of the message over which the signature is calculated or by modifying the
					signature itself. The evaluator shall then verify that the received message fails the signature
					validation check.
                  </test>
                  <test>
                    The evaluator shall send an encrypted message from the TOE to an OE receiver using each of the
					algorithms specified in the ST. 
					The evaluator shall verify that each message is encrypted and the OE receiver can successfully 
					decrypt each message. 
					The evaluator shall then use the OE receiver to send an encrypted reply back to the TOE for each
					message sent at the start of this test. 
					The evaluator shall verify that each reply is encrypted and the TOE can successfully decrypt
					each reply.
                  </test>
                  <test>
                    The evaluator shall verify that the contents are encrypted in transit and that the received 
					message decrypts.
                  </test>
                  <test>
                    After verifying the message decrypts, the evaluator shall send an encrypted message using each
					of the algorithms specified in the ST and use a man-in-the-middle tool to modify at least one byte 
					of the message such that the encryption is no longer valid. The evaluator shall then verify that the
					received message fails to decrypt.
                  </test>
                  <test>
                    The evaluator shall send an encrypted message to the email client using an encryption algorithm 
					not supported according to the signatureAlgorithm field. 
					The evaluator shall verify that the email client does not display or decrypt the contents of the 
					message.
                  </test>
                  <test>
                    The evaluator shall send a signed message to the email client using a signature algorithm not
					supported according to the digestAlgorithm ID (e.g., SHA1). The evaluator shall then verify that the 
					email client provides a notification that the contents cannot be verified because the signature 
					algorithm is not supported.
                  </test>
                  <test>
                    The evaluator shall send an encrypted message to the email client using an encryption algorithm not
					supported according to the AlgorithmIdentifier field. The evaluator shall then verify that the email
					client does not display or decrypt the contents of the message.
                  </test>
                  <test>
                    The evaluator shall send the email client a message signed by a certificate without
					the digitalSignature bit set. The evaluator shall then verify that the email client notifies the
					user that the signature is invalid.
                  </test>
                  <test>
                    The evaluator shall send the email client a message signed by a certificate without the Email 
					Protection purpose in the extendedKeyUsage. The evaluator shall then verify that the email client
					notifies the user that the signature is invalid.
                  </test>
                  <test>
                    The evaluator shall verify that the email client uses OCSP or downloads the CRL at the assigned 
					frequency.
                  </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
          <f-element id="fcs-smime-ext-1-2">
            <title>
              The TSF shall transmit the ContentEncryptionAlgorithmIdentifier for
	        AES-256 CBC and
              <selectables>
                <selectable id="fcs_smime_ext.1.2_1">
                  AES-256 GCM
                </selectable>
                <selectable id="fcs_smime_ext.1.2_2">
                  no other
                </selectable>
              </selectables>
              as part of the S/MIME protocol.
            </title>
            <note role="application">
              Advanced Encryption Standard (AES) was added to Cryptographic Message Syntax (CMS) as defined in RFC 3565.
            </note>
          </f-element>
          <f-element id="fcs-smime-ext-1-3">
            <title>
              The TSF shall present the digestAlgorithm field with the following
	        Message Digest Algorithm identifiers
              <selectables>
                <selectable id="fcs_smime_ext.1.3_1">
                  id-sha384
                </selectable>
                <selectable id="fcs_smime_ext.1.3_2">
                  id-sha512
                </selectable>
              </selectables>
              and no others as part of the S/MIME protocol.
            </title>
            <ext-comp-def-title>
              <title>
                The TSF shall present the digestAlgorithm field with the following Message Digest Algorithm identifiers
                <assignable>
                  message digest algorithm identifiers
                </assignable>
                and no others as part of the S/MIME protocol.
              </title>
            </ext-comp-def-title>
          </f-element>
          <f-element id="fcs-smime-ext-1-4">
            <title>
              The TSF shall present the signatureAlgorithm field with the following:
              <selectables linebreak="yes">
                <selectable id="fcs_smime_ext.1.4_1">
                  sha384WithRSAEncryption
                </selectable>
                <selectable id="fcs_smime_ext.1.4_2">
                  sha512WithRSAEncryption
                </selectable>
                <selectable id="fcs_smime_ext.1.4_3">
                  ecdsawithsha384
                </selectable>
                <selectable id="fcs_smime_ext.1.4_4">
                  ecdsawithsha512
                </selectable>
                <selectable id="fcs_smime_ext.1.4_5">
                  no other algorithms
                </selectable>
              </selectables>
              as part of the S/MIME protocol.
            </title>
            <ext-comp-def-title>
              <title>
                The TSF shall present the signatureAlgorithm field with the following: sha256withRSAEncryption and
                <assignable>
                  signatureAlgorithm field values
                </assignable>
                and no other algorithms as part of the S/MIME protocol.
              </title>
            </ext-comp-def-title>
            <note role="application">
              RFC 8551 mandates that receiving and sending agents support RSA with SHA256. 
	        The algorithms to be tested in the evaluated configuration are limited to the algorithms specified in 
			the FCS_SMIME_EXT.1.4 selection. 
	        Any other algorithms implemented that do not comply with these requirements should not be included in an
			evaluated email client.
              <h:p/>
              Additional algorithms supported by RFC 8551 will be reviewed and considered by the TC in a future version 
		  of this PP-Module.
            </note>
          </f-element>
          <f-element id="fcs-smime-ext-1-5">
            <title>
              The TSF shall support use of different private keys (and associated
	        certificates) for signature and for encryption as part of the S/MIME protocol.
            </title>
          </f-element>
          <f-element id="fcs-smime-ext-1-6">
            <title>
              The TSF shall only accept a signature from a certificate with the
	        digitalSignature bit set as part of the S/MIME protocol.
            </title>
            <note role="application">
              It is acceptable to assume that the digitalSignature bit is
	        set in cases where there is no keyUsage extension.
            </note>
          </f-element>
          <f-element id="fcs-smime-ext-1-7">
            <title>
              The TSF shall implement mechanisms to retrieve certificates and
	        certificate revocation information in accordance with FIA_X509_EXT.1.1
              <selectables>
                <selectable id="fcs_smime_ext.1.7_1">
                  for each signed and encrypted message sent and received
                </selectable>
                <selectable id="fcs_smime_ext.1.7_3">
                  <assignable>
                    frequency
                  </assignable>
                </selectable>
              </selectables>
              as part of the S/MIME protocol.
            </title>
            <note role="application">
              In accordance with FIA_X509_EXT.1.1 in
              <xref to="bibAppPP"/>
              ,
	        certificate revocation may use a Certificate Revocation List (CRL) or Online Certificate
	        Status Protocol (OCSP). The email client can define how this mechanism behaves,
	        including whether it uses the underlying OS, but it is required that a mechanism
	        exists such that revocation status is supported and so that certificates can be
	        retrieved for sending and receiving messages. Frequency is configurable in FMT_MOF.1/EmailClient. 
	        In this requirement, frequency can be interpreted as a
	        one-time function with local storage, as a regularly scheduled retrieval, or as a
	        mechanism that requires manual intervention. If the retrieval mechanism is periodic in
	        nature, then the ST author will need to include an iteration of FCS
	        for storage of revocation information; storage of certificates is covered in FCS_CKM_EXT.3.
	        The import of certificates and certificate chains is not included in this requirement,
	        but is covered in FMT_SMF.1/EmailClient.
            </note>
          </f-element>
        </f-component>
      </section>
      <!-- 5.2.2 User Data Protection (FDP) -->
      <section title="User Data Protection (FDP)" id="fdp">
        <ext-comp-def title="Notifications" fam-id="FDP_NOT_EXT">
          <fam-behavior>
            Components in this family define requirements for the TSF's ability to notify users about potential insecure interactions with data.
          </fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Use of Secure/Multipurpose Internet Mail Extensions (S/MIME)" fam-id="FDP_SMIME_EXT">
          <fam-behavior>
            Components in this family define requirements to implement S/MIME.
          </fam-behavior>
        </ext-comp-def>
        <!-- FDP_NOT_EXT.1 Notification of S/MIME Status -->
        <f-component cc-id="fdp_not_ext.1" id="fdp-not-ext-1" name="Notification of S/MIME Status">
          <consistency-rationale>
            This SFR defines the behavior an email client exhibits when a message is received.
	      It does not impact the Base-PP functionality.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to present the S/MIME status of received email messages.
          </comp-lev>
          <dependencies>
            <no-link>
              FCS_SMIME_EXT.1
            </no-link>
            Secure/Multipurpose Internet Mail Extensions (S/MIME)
          </dependencies>
          <f-element id="fdp-not-ext-1-1">
            <title>
              The TSF shall display a notification of the S/MIME status of received
	      emails upon viewing.
            </title>
            <note role="application">
              S/MIME status is whether the email has been signed or encrypted
	      and whether the signature can be verified and the associated certificate can be validated. This
	      notification must at least display when the email content is viewed. Many
	      implementations also display the S/MIME status of each email when all emails are
	      viewed as a list.
            </note>
            <aactivity level="component">
              <TSS>
                The evaluator shall ensure that the TSS describes notifications of S/MIME status, including whether S/MIME 
			status is also indicated upon viewing a list of emails.
              </TSS>
              <Guidance>
                The evaluator shall verify that the operational guidance provides a description (with appropriate visual 
		figures) of the S/MIME status notifications, including how each of the following are indicated: encryption, 
		verified and validated signature, and unverified and unvalidated signature.
              </Guidance>
              <Tests>
                The evaluator shall perform the following tests and may perform them in conjunction with the tests for FCS_SMIME_EXT.1:
                <h:p/>
                <testlist>
                  <test>
                    The evaluator shall send the client an unencrypted and unsigned email and verify that no notifications
			are present upon viewing.
                  </test>
                  <test>
                    The evaluator shall send the client an encrypted email and verify that the encrypted notification is
			present upon viewing.
                  </test>
                  <test>
                    The evaluator shall send the client a valid signed email and verify that the signed notification is
			present upon viewing.
                  </test>
                  <test>
                    The evaluator shall send the client an invalid signed email (for example, using a certificate that
			does not contain the correct email address or a certificate that does not chain to the root store) and 
			verify that the invalid signature notification is present upon viewing.
                  </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!-- FDP_SMIME_EXT.1 S/MIME -->
        <f-component cc-id="fdp_smime_ext.1" id="fdp-smime-ext-1" name="S/MIME">
          <consistency-rationale>
            This SFR defines the format an email client shall use as output for cryptographic operations.
	      It does not impact the Base-PP functionality.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to support S/MIME.
          </comp-lev>
          <dependencies>
            <no-link>
              FCS_SMIME_EXT.1
            </no-link>
            Secure/Multipurpose Internet Mail Extensions (S/MIME)
          </dependencies>
          <f-element id="fdp-smime-ext-1-1">
            <title>
              The TSF shall use S/MIME to sign, verify, encrypt, and decrypt
	      mail.
            </title>
            <note role="application">
              Note that this requirement does not mandate that S/MIME be
	      used for all incoming and outgoing messages, or that the email client automatically
	      encrypt or sign and verify all sent or received messages. This requirement only
	      specifies that the mechanism for digital signature and encryption must be
	      S/MIME.
            </note>
            <aactivity level="component">
              <TSS>
                The evaluator shall verify that the TSS contains a description of the S/MIME implementation and its use to
		protect mail from undetected modification using digital signatures and unauthorized disclosure using 
		encryption. The evaluator shall also verify that the TSS describes whether signature verification and
		decryption occur at receipt or viewing of the message contents, and whether messages are stored with their
		S/MIME envelopes.
              </TSS>
              <Guidance>
                The evaluator shall ensure that the operational guidance includes instructions for configuring a
			certificate for S/MIME use and instructions for signing and encrypting email.
              </Guidance>
              <Tests>
                Tests for this component are performed in conjunction with tests for FCS_SMIME_EXT.1 and FDP_NOT_EXT.1.
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!-- 5.2.3 Identification and Authentication (FIA) -->
      <section title="Identification and Authentication (FIA)" id="fia">
        <!-- FIA_X509_EXT.2/SMIME X.509 Certificate Support for Functions (S/MIME) -->
        <f-component cc-id="fia_x509_ext.2" id="fia-x509-ext-2-smime" name="X.509 Certificate Support for Functions (S/MIME)" iteration="SMIME">
          <consistency-rationale>
            This SFR defines the format an email client shall use for certificates to perform encryption and authentication.
	      It does not impact the Base-PP functionality.
          </consistency-rationale>
          <f-element id="fia_x509_ext-2-1_SMIME">
            <title>
              The TSF shall
              <selectables>
                <selectable id="fia_x509_ext.2.1_SMIME_1">
                  invoke platform-provided functionality to validate
                </selectable>
                <selectable id="fia_x509_ext.2.1_SMIME_2">
                  validate
                </selectable>
              </selectables>
              X.509v3 certificates in accordance with
              <xref to="fia-x509-ext-1-smime"/>
              <h:b>
                in the
                <xref to="pkg-x509"/>
              </h:b>
              to support [
              <h:i>
                authentication and encryption for S/MIME, installation of code
              </h:i>
              ] using
	        [
              <h:i>
                [code signing for system software updates, [encryption of email messages, digitally signing of email messages]]
              </h:i>
              ].
            </title>
            <note role="application">
              The intent of this requirement is to require the use of X.509 certificates to determine authentication and integrity for email messages using S/MIME, and to prevent the installation of code in the event of an invalid code signing certificate.
            </note>
            <aactivity level="component">
              <TSS>
                The evaluator shall ensure that the TSS describes how the email client chooses which certificates to 
			  use so that the email client can use the certificates.
                <h:p/>
                The evaluator shall confirm that the TSS describes the behavior of the email client when a connection 
			  cannot be established during the validity check of a certificate used in establishing a trusted channel
			  and protecting email.
              </TSS>
              <Guidance>
                The evaluator shall verify that the administrative guidance contains any necessary instructions for
			  configuring the operating environment so that the email client can use the certificates.
              </Guidance>
              <Tests>
                The evaluator shall perform the following tests:
                <testlist>
                  <test>
                    The evaluator shall perform this test for each function listed in FIA_X509_EXT.2.1
					(from the Base-PP) that requires the use of certificates. The evaluator shall demonstrate that
					using a certificate without a valid certification path results in the function failing. The
					evaluator shall then load into the platform's root store any certificates needed to validate the 
					certificate to be used in the function, and demonstrate that the function succeeds.
                  </test>
                  <test>
                    The evaluator shall use the TOE to communicate with a non-TOE IT entity that presents a certificate
					that can be validated.
					The evaluator shall then manipulate the environment so that the TOE is unable to verify the
					validity of the presented certificate (e.g., by deliberately making the method of revocation
					checking unavailable), and observe that the action selected in FIA_X509_EXT.2.2 
					(from
                    <xref to="pkg-x509"/>
                    ) is performed. 
					If the selected action is administrator-configurable, then the evaluator shall verify that all 
					supported administrator-configurable options behave in their documented manner by following the 
					operational guidance.
                  </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
          <f-element id="fia-x509-ext-2e2-smime">
            <title>
              For each function indicated in FIA_X509_EXT.2.1
              <h:b>
                /SMIME
              </h:b>
              , the TSF shall
              <selectables>
                <selectable id="fia_x509_ext.2.2_SMIME_1">
                  invoke the TOE platform to determine
                </selectable>
                <selectable id="fia_x509_ext.2.2_SMIME_2">
                  determine
                </selectable>
              </selectables>
              whether the [
              <h:i>
                certificate is not accpted
              </h:i>
              ]
	        when valid certificate revocation status information cannot be obtained from a source indicated in FIA_X509_EXT.1.3.
            </title>
            <note role="application">
              The intent of this requirement is to enforce that the TSF presents the installation of code or the 
			signing and encryption of email if the associated code signing or email protection certificate is deemed 
			invalid.
            </note>
          </f-element>
        </f-component>
      </section>
      <!-- 5.2.4 Security Management (FMT) -->
      <section title="Security Management (FMT)" id="fmt">
        <!-- FMT_SMF.1/EmailClient Specification of Management Functions -->
        <f-component cc-id="fmt_smf.1" id="fmt-smf-1-emailclient" name="Specification of Management Functions" iteration="EmailClient">
          <consistency-rationale/>
          <f-element id="fmt-smf-1-1-emailclient">
            <title>
              The TSF shall be capable of performing the following management
	      functions [
              <h:i>
                controlled by the user or administrator as shown:
                <h:ul>
                  <h:li>
                    X: Mandatory
                  </h:li>
                  <h:li>
                    O: Optional
                  </h:li>
                </h:ul>
              </h:i>
              ].
              <h:br/>
              <h:br/>
              <h:b>
                <ctr id="undefined" ctr-type="Table">
                  : Management Functions
                </ctr>
              </h:b>
              <h:br/>
              <h:br/>
              Status Markers:
              <h:br/>
              O - Indicates that this function is optional for this role
              <h:br/>
              <h:br/>
              <management-function-set default="O">
                <manager cid="A">
                  Administrator
                </manager>
                <manager cid="U">
                  User
                </manager>
                <management-function id="mf-1">
                  <text>
                    Enable or disable downloading embedded objects globally and by
                    <selectables>
                      <selectable id="fmt_smf.1.1_EmailClient_1">
                        domain
                      </selectable>
                      <selectable id="fmt_smf.1.1_EmailClient_2">
                        sender
                      </selectable>
                      <selectable id="fmt_smf.1.1_EmailClient_3">
                        no other method
                      </selectable>
                    </selectables>
                  </text>
                  <O ref="A"/>
                  <O ref="U"/>
                  <aactivity>
                    <TSS></TSS>
                    <Guidance></Guidance>
                    <Tests></Tests>
                  </aactivity>
                </management-function>
                <management-function id="mf-2">
                  <text>
                    Enable or disable plaintext-only mode globally and by
                    <selectables>
                      <selectable id="fmt_smf.1.1_EmailClient_4">
                        domain
                      </selectable>
                      <selectable id="fmt_smf.1.1_EmailClient_5">
                        sender
                      </selectable>
                      <selectable id="fmt_smf.1.1_EmailClient_6">
                        no other method
                      </selectable>
                    </selectables>
                  </text>
                  <O ref="A"/>
                  <O ref="U"/>
                  <aactivity>
                    <TSS></TSS>
                    <Guidance></Guidance>
                    <Tests></Tests>
                  </aactivity>
                </management-function>
                <management-function id="mf-3">
                  <text>
                    Enable or disable rendering and execution of attachments globally and by
                    <selectables>
                      <selectable id="fmt_smf.1.1_EmailClient_7">
                        domain
                      </selectable>
                      <selectable id="fmt_smf.1.1_EmailClient_8">
                        sender
                      </selectable>
                      <selectable id="fmt_smf.1.1_EmailClient_9">
                        no other method
                      </selectable>
                    </selectables>
                  </text>
                  <O ref="A"/>
                  <O ref="U"/>
                  <aactivity>
                    <TSS></TSS>
                    <Guidance></Guidance>
                    <Tests></Tests>
                  </aactivity>
                </management-function>
                <management-function id="mf-4">
                  <text>
                    Enable or disable email notifications
                  </text>
                  <O ref="A"/>
                  <O ref="U"/>
                  <aactivity>
                    <TSS></TSS>
                    <Guidance></Guidance>
                    <Tests></Tests>
                  </aactivity>
                </management-function>
                <management-function id="mf-5">
                  <text>
                    Configure a certificate repository for encryption
                  </text>
                  <O ref="A"/>
                  <O ref="U"/>
                  <aactivity>
                    <TSS></TSS>
                    <Guidance></Guidance>
                    <Tests></Tests>
                  </aactivity>
                </management-function>
                <management-function id="mf-6">
                  <text>
                    Configure whether to establish a trusted channel or disallow establishment if the email client cannot establish a connection to determine the validity of a certificate
                  </text>
                  <O ref="A"/>
                  <O ref="U"/>
                  <aactivity>
                    <TSS></TSS>
                    <Guidance></Guidance>
                    <Tests></Tests>
                  </aactivity>
                </management-function>
                <management-function id="mf-7">
                  <text>
                    Configure message sending and receiving to only use cryptographic algorithms defined in FCS_SMIME_EXT.1
                  </text>
                  <O ref="A"/>
                  <O ref="U"/>
                  <aactivity>
                    <TSS></TSS>
                    <Guidance></Guidance>
                    <Tests></Tests>
                  </aactivity>
                </management-function>
                <management-function id="mf-8">
                  <text>
                    Configure CRL retrieval frequency
                  </text>
                  <O ref="A"/>
                  <O ref="U"/>
                  <aactivity>
                    <TSS></TSS>
                    <Guidance></Guidance>
                    <Tests></Tests>
                  </aactivity>
                </management-function>
                <management-function id="mf-9">
                  <text>
                    Enable or disable support for add-ons
                  </text>
                  <O ref="A"/>
                  <O ref="U"/>
                  <aactivity>
                    <TSS></TSS>
                    <Guidance></Guidance>
                    <Tests></Tests>
                  </aactivity>
                </management-function>
                <management-function id="mf-10">
                  <text>
                    Change password or passphrase authentication credential
                  </text>
                  <O ref="A"/>
                  <O ref="U"/>
                  <aactivity>
                    <TSS></TSS>
                    <Guidance></Guidance>
                    <Tests></Tests>
                  </aactivity>
                </management-function>
                <management-function id="mf-11">
                  <text>
                    Disable key recovery functionality
                  </text>
                  <O ref="A"/>
                  <O ref="U"/>
                  <aactivity>
                    <TSS></TSS>
                    <Guidance></Guidance>
                    <Tests></Tests>
                  </aactivity>
                </management-function>
                <management-function id="mf-12">
                  <text>
                    Configure cryptographic functionality
                  </text>
                  <O ref="A"/>
                  <O ref="U"/>
                  <aactivity>
                    <TSS></TSS>
                    <Guidance></Guidance>
                    <Tests></Tests>
                  </aactivity>
                </management-function>
                <management-function id="mf-13">
                  <text>
                    <assignable>
                      Other management functions
                    </assignable>
                  </text>
                  <O ref="A"/>
                  <O ref="U"/>
                  <aactivity>
                    <TSS></TSS>
                    <Guidance></Guidance>
                    <Tests></Tests>
                  </aactivity>
                </management-function>
              </management-function-set>
            </title>
            <note role="application">
              For these management functions, the term "Administrator" refers
		  to the administrator of a non-mobile device or the device owner of a mobile device.
		  The Administrator is responsible for management activities, including setting the
		  policy that is applied by the enterprise on the email client. The Administrator could
		  be acting remotely and could be the mail transfer agent (MTA) administrator acting through a centralized
		  management console or dashboard. Applications used to configure enterprise policy
		  should have their own identification and authorization and additional security
		  requirements to ensure that the remote administration is trusted.
              <h:p/>
              For each management function specified in this SFR, it is optional for a conformant TOE to implement this function because not all conformant email clients may need to implement each function. Additionally, within each function, if the TSF does implement the function, it is optional as to whether a user is authorized to perform that function or if it is restricted to an administrator.
              <h:p/>
              The intent of
		  this requirement is to allow the Administrator to configure the email client with a
		  policy that may not be overridden by the user. If the Administrator has not set a
		  policy for a particular function, the user may still perform that function.
		  Enforcement of the policy is done by the email client itself, or the email client and
		  the email client platform in coordination with each other.
              <h:p/>
              The function to
		  configure whether to establish a trusted channel corresponds to the functionality
		  described in FIA_X509_EXT.2.2 (from
              <xref to="pkg-x509"/>
              ). The Administrator has the
		  option of accepting or rejecting all certificates that cannot be validated, accepting
		  a given certificate that cannot be validated, or not accepting a given certificate
		  that cannot be validated. Depending on the choice that the Administrator has made in
		  FIA_X509_EXT.2.2 (from
              <xref to="pkg-x509"/>
              ), the trusted connection will either be
		  allowed for all certificates that cannot be validated, disallowed for all certificates
		  that cannot be validated, allowed for a given certificate that cannot be validated, or
		  disallowed for a given certificate that cannot be validated.
              <h:p/>
              If password or
		  passphrase authorization factors are implemented by the email client, then the
		  appropriate "change" selection must be included.
              <h:p/>
              If the email client provides
		  configurability of the cryptographic functions (for example, key size), then "configure cryptographic
		  functionality" will be included, and the specifics of the functionality offered can
		  either be written in this requirement as bullet points, or included in the TSS. This applies even if the configuration is in the form of parameters that may be passed to cryptographic functionality implemented on the TOE platform.
              <h:p/>
              If the email client does include a key recovery function, the
		  email client must provide the capability for the user to turn this functionality off
		  so that no recovery key is generated and no keys are permitted to be exported.
            </note>
            <aactivity level="component">
              The evaluation activities for this component will be driven by the selections made by the ST author. 
			If a capability is not selected in the ST, the noted evaluation activity does not need to be performed.
              <TSS>
                The evaluator shall verify that the TSS describes those management functions that can only be configured by 
		  the email client platform administrator and cannot be overridden by the user when set according to policy.
                <h:p/>
                Change Password: The evaluator ensure that the operational guidance describes how the password or
		  passphrase-based authorization factor is to be changed.
                <h:p/>
                Disable Key Recovery: If the email client supports key recovery, this must be stated in the TSS. The TSS 
		  shall also describe how to disable this functionality. This includes a description of how the recovery material
		  is provided to the recovery holder.
                <h:p/>
                Cryptographic Configuration: The evaluator shall determine from the TSS for other requirements (FCS_*) what
		  portions of the cryptographic functionality are configurable.
              </TSS>
              <Guidance>
                The evaluator shall verify that the operational guidance includes instructions for an email client platform 
		administrator to configure the functions listed in FMT_SMF.1/EmailClient.
                <h:p/>
                Disable Key Recovery: If the email client supports key recovery, the guidance for disabling this capability 
		shall be described in the operational guidance.
                <h:p/>
                Cryptographic Configuration: The evaluator shall verify that the operational guidance has instructions for 
		  manipulating all of the claimed mechanisms.
              </Guidance>
              <Tests>
                The evaluator shall perform the following tests:
                <testlist>
                  <test>
                    The evaluator shall verify that all functions perform as intended by enabling, disabling, and configuring
		  the functions.
                  </test>
                  <test>
                    The evaluator shall set management functions which are controlled by the (enterprise) administrator and 
		  cannot be overridden by the user. The evaluator shall apply these functions to the client, attempt to override
		  each setting as the user, and ensure that the email client does not permit it.
                  </test>
                  <test>
                    [Conditional: the TSF has a key recovery capability] The evaluator shall devise a test that ensures
		  that the key recovery capability has been or can be disabled following the guidance provided by the vendor
                  </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!-- 5.2.5 Protection of the TSF (FPT) -->
      <section title="Protection of the TSF (FPT)" id="fpt">
        <ext-comp-def title="Add-Ons" fam-id="FPT_AON_EXT">
          <fam-behavior>
            Components in this family define requirements for the secure handling of add-ons that can be installed on top of the TOE.
          </fam-behavior>
        </ext-comp-def>
        <!-- FPT_AON_EXT.1 Support for Only Trusted Add-ons -->
        <f-component cc-id="fpt_aon_ext.1" id="fpt-aon-ext-1" name="Support for Only Trusted Add-ons">
          <consistency-rationale>
            This SFR defines what types of add-ons an email client may use.
	      It does not impact the Base-PP functionality.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to either support no add-ons or to only support trusted add-ons.
          </comp-lev>
          <management>
            The following actions could be considered for the management functions in FMT:
            <h:ul>
              <h:li>
                Enable or disable support for add-ons.
              </h:li>
            </h:ul>
          </management>
          <f-element id="fpt-aon-ext-1-1">
            <title>
              The TSF shall include the capability to load
              <selectables>
                <selectable id="addons_supported">
                  trusted add-ons
                </selectable>
                <selectable id="fpt_aon_ext.1.1_1" exclusive="yes">
                  no add-ons
                </selectable>
              </selectables>
              .
            </title>
            <note role="application">
              If "trusted add-ons" is selected in FPT_AON_EXT.1.1, the TOE must also claim the
			selection-based SFR FPT_AON_EXT.2.
              <h:p/>
              If the email client does not include support for installing only trusted
	      add-ons, this requirement can be met by demonstrating the ability to disable all
	      support for add-ons as specified in FMT_SMF.1/EmailClient.
            </note>
            <aactivity level="component">
              <TSS>
                The evaluator shall verify that the TSS describes whether the email client is capable of loading trusted 
			add-ons.
              </TSS>
              <Guidance>
                The evaluator shall verify that the operational guidance includes instructions on loading trusted add-on
			sources.
              </Guidance>
              <Tests>
                The evaluator shall create or obtain an untrusted add-on and attempt to load it. The evaluator shall then verify that the untrusted add-on is rejected and cannot be loaded.
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!-- 5.2.6 Trusted Path/Channels (FTP) -->
      <section title="Trusted Path/Channels (FTP)" id="ftp">
        <!-- FTP_ITC.1 Inter-TSF Trusted Channel -->
        <f-component cc-id="ftp_itc.1" id="ftp-itc-1" name="Inter-TSF Trusted Channel">
          <consistency-rationale>
            This SFR defines which channels for an email client must be considered trusted.
	      It does not impact the Base-PP functionality.
          </consistency-rationale>
          <f-element id="ftp-itc-1-1">
            <title>
              The TSF shall enforce the
              <assignable>
                access control SFP(s) and/or information flow control SFP(s)
              </assignable>
              when importing user data, controlled under the SFP, from outside of the
			TOE.
            </title>
            <aactivity level="component">
              <TSS>
                The evaluator shall verify that the TSS describes the details of the email client connecting to a Mail Transfer 
			Agent in terms of the trusted connection (i.e., TLS) according to FTP_DIT_EXT.1 in the Base-PP, along
			with email client-specific options or procedures that might not be reflected in the specification.
              </TSS>
              <Guidance>
                The evaluator shall confirm that the operational guidance contains instructions for establishing the 
		  connection to the Mail Transfer Agent.
              </Guidance>
              <Tests>
                The evaluator shall perform the following tests:
                <testlist>
                  <test>
                    The evaluator shall ensure that the email client is able to initiate or receive communications using
			any selected or assigned protocols specified in the requirement over TLS, setting up the connections as 
			described in the operational guidance and ensuring that communication is successful.
                  </test>
                  <test>
                    The evaluator shall ensure that the email client is able to initiate or receive communications
			with a Mail Transfer Agent using any assigned protocols specified in the requirement over TLS, setting up
			the connections as described in the operational guidance and ensuring that communication is successful.
                  </test>
                  <test>
                    The evaluator shall ensure, for each communication channel with an authorized IT entity in 
			tests 1 and 2, the channel data is not sent in plaintext. To perform this test, the evaluator shall 
			use a sniffer and a packet analyzer. The packet analyzer must indicate that the protocol in use is TLS.
                  </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
          <f-element id="ftp-itc-1-2">
            <title>
              The TSF shall ignore any security attributes associated with the user data when imported
			from outside the TOE.
            </title>
          </f-element>
          <f-element id="ftp-itc-1-3">
            <title>
              The TSF shall enforce the following rules when importing user data controlled under the
SFP from outside the TOE:
              <assignable>
                additional importation control rules
              </assignable>
              .
            </title>
          </f-element>
        </f-component>
      </section>
    </man-sfrs>
    <opt-sfrs>
      <!-- 5.2.7 Cryptographic Support (FCS) -->
      <section title="Cryptographic Support (FCS)" id="fcs">
        <ext-comp-def title="Initialization Vector Generation" fam-id="FCS_IVG_EXT">
          <fam-behavior>
            Components in this family define requirements for the secure generation of initialization vectors used in support of other cryptographic functions.
          </fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Cryptographic Nonce Generation" fam-id="FCS_NOG_EXT">
          <fam-behavior>
            Components in this family define requirements for the secure generation of nonces used in support of other cryptographic functions.
          </fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Cryptographic Salt Generation" fam-id="FCS_SAG_EXT">
          <fam-behavior>
            Components in this family define requirements for the secure generation of salts used in support of other cryptographic functions.
          </fam-behavior>
        </ext-comp-def>
        <!-- FCS_IVG_EXT.1 Initialization Vector Generation -->
        <f-component cc-id="fcs_ivg_ext.1" id="fcs-ivg-ext-1" name="Initialization Vector Generation">
          <consistency-rationale>
            This SFR defines how clients generate IVs for cryptographic operations.
            It does not impact functionality described by the Base-PP.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to generate initialization vectors in a specified manner.
          </comp-lev>
          <dependencies>
            <no-link>
              FCS_COP.1
            </no-link>
            Cryptographic Operation
          </dependencies>
          <f-element id="ftp-ivg-ext-1-1">
            <title>
              The TSF shall create IVs in the following manner:
              <selectables linebreak="yes">
                <selectable id="fcs_ivg_ext.1.1_1">
                  CBC: IVs shall be non-repeating and unpredictable
                </selectable>
                <selectable id="fcs_ivg_ext.1.1_2">
                  CCM: IV shall be non-repeating
                </selectable>
                <selectable id="fcs_ivg_ext.1.1_3">
                  XTS: No IV. Tweak values shall be non-negative integers, assigned consecutively, and starting at an arbitrary non-negative integer
                </selectable>
                <selectable id="fcs_ivg_ext.1.1_4">
                  GCM: IV shall be non-repeating. The number of invocations of GCM shall not exceed 2^32 for a given secret key.
                </selectable>
              </selectables>
            </title>
            <ext-comp-def-title>
              <title>
                The TSF shall create IVs in the following manner:
                <assignable>
                  IVs and methods of creation
                </assignable>
                .
              </title>
            </ext-comp-def-title>
            <note role="application">
              FCS_IVG_EXT.1.1 specifies how the IV should be handled for each
              encryption mode. Cipher Block Chaining (CBC), XTS, and Galois Counter Mode (GCM) are allowed for AES encryption of the data. AES-CCM
              is an allowed mode for Key Wrapping.
            </note>
            <aactivity level="component">
              <TSS>
                The evaluator shall ensure the TSS describes how IVs and tweaks are handled (based on the AES mode). 
                The evaluator shall confirm that the IVs and tweaks meet the stated requirements.
                <h:p/>
                If the platform provides the IV generation, then the evaluator shall verify that the TSS describes 
				how the IV generation is invoked.
              </TSS>
              <Guidance/>
              <Tests/>
            </aactivity>
          </f-element>
        </f-component>
        <!-- FCS_NOG_EXT.1 Cryptographic Nonce Generation -->
        <f-component cc-id="fcs_nog_ext.1" id="fcs-nog-ext-1" name="Cryptographic Nonce Generation">
          <consistency-rationale>
            This SFR defines how clients generate nonces for cryptographic operations.
	  It does not impact functionality described by the Base-PP.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to generate nonces in a specified manner.
          </comp-lev>
          <dependencies>
            <no-link>
              FCS_COP.1
            </no-link>
            Cryptographic Operation
          </dependencies>
          <f-element id="fcs-nog-ext-1-1">
            <title>
              The TSF shall only use unique nonces with a minimum size of 64
	  bits.
            </title>
            <aactivity level="component">
              <TSS>
                The evaluator shall verify that the TSS describes how unique nonces are created.
              </TSS>
              <Guidance/>
              <Tests/>
            </aactivity>
          </f-element>
        </f-component>
        <!-- FCS_SAG_EXT.1 Cryptographic Salt Generation -->
        <f-component cc-id="fcs_sag_ext.1" id="fcs-sag-ext-1" name="Cryptographic Salt Generation">
          <consistency-rationale>
            This SFR defines how clients generate salts for cryptographic operations.
            It does not impact functionality described by the Base-PP.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to generate salts in a specified manner.
          </comp-lev>
          <dependencies>
            <no-link>
              FCS_RBG_EXT.1
            </no-link>
            Random Bit Generation Services
          </dependencies>
          <f-element id="fcs-sag-ext-1-1">
            <title>
              The TSF shall only use salts that are generated by a
              <selectables linebreak="yes">
                <selectable id="fcs_sag_ext.1.1_1">
                  DRBG as specified in [
                  <h:i>
                    FCS_RBG_EXT.2 (as defined in the Base-PP)
                  </h:i>
                  ]
                </selectable>
                <selectable id="fcs_sag_ext.1.1_2">
                  DRBG provided by the host platform
                </selectable>
              </selectables>
            </title>
            <ext-comp-def-title>
              <title>
                The TSF shall only use salts that are generated by a
                <assignable>
                  trusted deterministic random bit generator
                </assignable>
                .
              </title>
            </ext-comp-def-title>
            <aactivity level="component">
              <TSS>
                The evaluator shall ensure the TSS describes how salts are generated. 
                The evaluator shall confirm that the salt is generated using a DRBG as described in FCS_RBG_EXT.1 
				in
                <xref to="bibAppPP"/>
                or by the Operational Environment. 
                If an external function is used for this purpose, the evaluator shall ensure that the TSS references
				the specific API that is called with inputs.
                <h:p/>
                If the email client is relying on random bit generation from the host platform, 
                the evaluator shall verify that the TSS includes the name and manufacturer of the external DRBG and 
				describes the function call and parameters used when calling the external DRBG function. 
                If different external DRBGs are used for different platforms, the evaluator shall ensure that the 
				TSS identifies each RBG for each platform.
                <h:p/>
                For all cases where the TSF relies on an external DRBG, the evaluator shall ensure that the TSS 
				includes a short description of the TOE developer's assumption for the amount of entropy that is 
				used to seed the external DRBG.
              </TSS>
              <Guidance/>
              <Tests/>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!-- 5.2.8 User Data Protection (FDP) -->
      <section title="User Data Protection (FDP)" id="fdp">
        <ext-comp-def title="Storage of Persistent Information" fam-id="FDP_PST_EXT">
          <fam-behavior>
            Components in this family define requirements for the enumeration of the minimum set of data the TSF must be able to store in order to implement its required functionality.
          </fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Rendering of Message Content" fam-id="FDP_REN_EXT">
          <fam-behavior>
            Components in this family define requirements for the rendering of data presented to a user such that the risk of malicious data transmission is minimized.
          </fam-behavior>
        </ext-comp-def>
        <!-- FDP_NOT_EXT.2 Notification of URI -->
        <f-component cc-id="fdp_not_ext.2" id="fdp-not-ext-2" name="Notification of URI">
          <consistency-rationale>
            This SFR defines how clients display URIs in embedded links.
	  It does not impact functionality described by the Base-PP.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to display the Uniform Resource Identifier (URI) of any embedded links.
          </comp-lev>
          <f-element id="fdp-not-ext-2-1">
            <title>
              The TSF shall display the full Uniform Resource Identifier (URI) of any
	  embedded links.
            </title>
            <note role="application">
              Embedded links are HTML URI objects which may have a tag (such
	  as a word, phrase, icon, or picture) that obfuscates the URI of the link. The intent
	  of this requirement is to de-obfuscate the link. The URI may be displayed as a
	  "mouse-over" event or may be rendered next to the tag.
            </note>
            <aactivity level="component">
              <TSS>
                The evaluator shall verify that the TSS includes a description of how embedded links are rendered and the 
		method by which the URI of the link is displayed.
              </TSS>
              <Guidance>
                The evaluator shall ensure that the operational guidance includes instructions (with any appropriate visual
		figures) for viewing the URI of an embedded link.
              </Guidance>
              <Tests>
                The evaluator shall send the client an HTML message with an embedded link whose tag is not the URI itself (for example, "click here"). The evaluator shall view the message and verify that the full URI of the embedded link is displayed by following the instructions in the operational guidance.
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!-- FDP_PST_EXT.1 Storage of Persistent Information -->
        <f-component cc-id="fdp_pst_ext.1" id="fdp-pst-ext-1" name="Storage of Persistent Information">
          <consistency-rationale>
            This SFR defines the persistent information that must be stored for email client functionality to work as intended.
	  It does not impact functionality described by the Base-PP.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to identify the minimum set of data it can store on the TOE platform while maintaining functionality.
          </comp-lev>
          <f-element id="fdp-pst-ext-1-1">
            <title>
              The TSF shall be capable of operating without storing persistent
	  information to the client platform with the following exceptions:
              <selectables>
                <selectable id="fdp_pst_ext.1.1_1">
                  credential information
                </selectable>
                <selectable id="fdp_pst_ext.1.1_2">
                  administrator-provided configuration information
                </selectable>
                <selectable id="fdp_pst_ext.1.1_3">
                  certificate revocation information
                </selectable>
                <selectable id="fdp_pst_ext.1.1_4">
                  no exceptions
                </selectable>
              </selectables>
              .
            </title>
            <ext-comp-def-title>
              <title>
                The TSF shall be capable of operating without storing persistent information to the client platform with the following exceptions:
                <assignable>
                  data that the TSF must store persistently
                </assignable>
                .
              </title>
            </ext-comp-def-title>
            <note role="application">
              Any data that persists after the email client closes, including
	  temporary files, is considered to be persistent data. Satisfying this requirement
	  would require the use of a protocol such as IMAP or MAPI. It is not compatible with
	  POP.
            </note>
            <aactivity level="component">
              <TSS>
                The evaluator shall verify that the TSS describes all persistent information stored on the platform
		and the locations on the platform where these data are stored. 
	    The evaluator shall confirm that the persistent data described is limited to the data identified in the
		selection.
              </TSS>
              <Guidance/>
              <Tests>
                The evaluator shall operate the email client so that several signed and encrypted messages and several unsigned messages are processed. The evaluator shall also exercise functionality such as moving messages to folders, writing unsent drafts of messages, etc., as provided by the client. The evaluator shall verify that the only persistent information stored on the client platform is that which is identified in the TSS.
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!-- FDP_REN_EXT.1 Rendering of Message Content -->
        <f-component cc-id="fdp_ren_ext.1" id="fdp-ren-ext-1" name="Rendering of Message Content">
          <consistency-rationale>
            This SFR defines functionality to display message content.
	  It does not impact functionality described by the Base-PP.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to implement a plaintext-only mode that prevents non-text content from being rendered.
          </comp-lev>
          <management>
            The following actions could be considered for the management functions in FMT:
            <h:ul>
              <h:li>
                Enable or disable plaintext-only mode.
              </h:li>
            </h:ul>
          </management>
          <f-element id="fdp-ren-ext-1-1">
            <title>
              The TSF shall have a plaintext-only mode which disables the rendering
	  and execution of
              <selectables linebreak="yes">
                <selectable id="fdp_ren_ext.1.1_1">
                  HTML
                </selectable>
                <selectable id="fdp_ren_ext.1.1_2">
                  JavaScript
                </selectable>
                <selectable id="fdp_ren_ext.1.1_4">
                  <assignable>
                    other embedded content types
                  </assignable>
                </selectable>
                <selectable id="fdp_ren_ext.1.1_5">
                  no embedded content types
                </selectable>
              </selectables>
              .
            </title>
            <ext-comp-def-title>
              <title>
                The TSF shall have a plaintext-only mode which disables the rendering and execution of
                <assignable>
                  embedded content types
                </assignable>
                .
              </title>
            </ext-comp-def-title>
            <note role="application">
              Plaintext-only mode prevents the automatic downloading,
	  rendering, and execution of images, external resources, and embedded objects such as
	  HTML or JavaScript objects. FMT_SMF.1/EmailClient addresses
	  configuration of this mode. The ST author must identify all content types supported by
	  the email client through selections and assignments. If the email client only
	  supports plaintext-only mode, no embedded content types should be selected.
            </note>
            <aactivity level="component">
              <TSS>
                The evaluator shall ensure that the TSS describes plaintext-only mode for sending and receiving messages. 
	    The evaluator shall verify that the TSS describes whether the email client is capable of rendering and
		executing HTML or JavaScript. 
	    If the email client can render or execute HTML or JavaScript, 
	    this description shall indicate how the email client handles received messages that contain HTML or JavaScript
		while in plaintext-only mode. 
	    The evaluator shall then ensure that the description indicates that embedded objects of these types 
	    are not rendered or executed and images and external resources are not automatically downloaded.
              </TSS>
              <Guidance>
                The evaluator shall ensure that the operational guidance contains instructions for enabling 
		  plaintext-only mode.
              </Guidance>
              <Tests>
                The evaluator shall perform the following tests:
                <testlist>
                  <test>
                    [Conditional: HTML is selected in FDP_REN_EXT.1.1] The evaluator shall send a message to the client 
		  containing HTML embedded objects and shall verify that the HTML renders. The evaluator shall then enable 
		  plaintext-only mode and verify that the HTML does not render.
                  </test>
                  <test>
                    [Conditional: JavaScript is selected in FDP_REN_EXT.1.1] The evaluator shall send a message to the
		  client containing JavaScript embedded objects and shall verify that the JavaScript renders and executes. 
		  The evaluator shall then enable plaintext-only mode and verify that the JavaScript does not render or 
		  execute.
                  </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
    </opt-sfrs>
    <sel-sfrs>
      <!-- 5.2.9 Cryptographic Support (FCS) -->
      <section title="Cryptographic Support (FCS)" id="fcs">
        <ext-comp-def title="Cryptographic Operation" fam-id="FCS_COP_EXT">
          <fam-behavior>
            Components in this family define requirements for cryptographic operation beyond those which are specified in the Part 2 family FCS_COP.
          </fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Submask Combining" fam-id="FCS_SMC_EXT">
          <fam-behavior>
            Components in this family define requirements for the process of key combination used in support of other cryptographic functions.
          </fam-behavior>
        </ext-comp-def>
        <!-- FCS_CKM_EXT.5 Cryptographic Key Derivation (password/passphrase Conditioning) -->
        <f-component cc-id="fcs_ckm_ext.5" id="fcs-ckm-ext-5" name="Cryptographic Key Derivation (password/passphrase Conditioning)">
          <consistency-rationale>
            This SFR defines restrictions on password composition and key derivation mechanisms. It defines functionality similar to FCS_PBKDF_EXT.1 in the Base-PP but has additional details 
            specific to the composition of the actual password authentication factor, rather than just defining a method for key derivation.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to support password or passphrase credentials with certain strength 
			of secret characteristics and to support the use of such credentials as an input to a password-based key 
			derivation function.
          </comp-lev>
          <management>
            The following actions could be considered for the management functions in FMT:
            <h:ul>
              <h:li>
                Change password or passphrase authentication credential.
              </h:li>
              <h:li>
                Change password or passphrase minimum length.
              </h:li>
            </h:ul>
          </management>
          <dependencies>
            <no-link>
              FCS_COP.1
            </no-link>
            Cryptographic Operation
          </dependencies>
          <f-element id="fcs-ckm-ext-5-1">
            <title>
              The TSF shall support a password/passphrase of up to
              <assignable>
                maximum password size, positive integer of 64 or more
              </assignable>
              characters used to generate a password authorization factor.
            </title>
            <note role="application">
              The password/passphrase is represented on the host machine as a sequence of characters whose 
			  encoding depends on the TOE and the underlying OS. 
              The ST author assigns the maximum size of the password or passphrase it supports; it must support at 
			  least 64 characters.
            </note>
            <aactivity level="component">
              <TSS>
                There are two aspects of this component that require evaluation: passwords/passphrases of the length
				specified in the requirement (at least 64 characters) are supported, and that the characters that are
				input are subject to the selected conditioning function. These activities are separately addressed in
				the text below.
                <h:p/>
                Support for Password/Passphrase length: The evaluator shall check to ensure that the TSS describes the
				allowable ranges for password/passphrase lengths, and that at least 64 characters may be specified by 
				the user.
                <h:p/>
                Support for PBKDF: The evaluator shall examine the password hierarchy TSS to ensure that the formation
				of all keys is described and that the key sizes match that described by the ST author.
                <h:p/>
                The evaluator shall check that the TSS describes the method by which the password/passphrase is first 
				encoded and then fed to the SHA algorithm. The settings for the algorithm (padding, blocking, etc.)
				shall be described, and the evaluator shall verify that these are supported by the selections in this 
				component as well as the selections concerning the hash function itself. The evaluator shall verify that
				the TSS contains a description of how the output of the hash function is used to form the submask that
				will be input into the function and is the same length as the KEK as specified in FCS_CKM.6.
                <h:p/>
                For the NIST SP 800-132-based conditioning of the password/passphrase, the required assurance activities
				will be performed when doing the assurance activities for the appropriate requirements (FCS_COP.1.1(4)
				from the [App PP]). If any manipulation of the key is performed in forming the submask that will be 
				used to form the FEK or KEK, that process shall be described in the TSS.
                <h:p/>
                No explicit testing of the formation of the submask from the input password is
				required.
                <h:p/>
                Conditioning: No explicit testing of the formation of the authorization factor 
				from the input password/passphrase is required. Iteration count: The evaluator shall verify that the 
				iteration count for PBKDFs performed by the TOE comply with NIST SP 800-132 by ensuring that the TSS 
				contains a description of the estimated time required to derive key material from passwords and how 
				the TOE increases the computation time for password-based key derivation (including but not limited to
				increasing the iteration count).
              </TSS>
              <Guidance>
                The evaluator shall check the Operational Guidance to determine that there are instructions on how
				to generate large passwords/passphrases, and instructions on how to configure the password/passphrase
				length (and optional complexity settings) to provide entropy commensurate with the keys that the 
				authorization factor is protecting. This is important because many default settings for 
				passwords/passphrases will not meet the necessary entropy needed as specified in this PP-Module.
              </Guidance>
              <Tests>
                The evaluator shall compose passwords that either meet the requirements, or fail to meet the requirements, and shall verify that the TOE's behavior is consistent with the requirements. While the evaluator is not required (nor is it feasible) to test all possible compositions of passwords, the evaluator shall ensure that all characters, and minimum and maximum lengths listed in the requirement, are supported, and justify the subset of those characters chosen for testing.
                <h:p/>
                Support for Password/Passphrase characteristics: In addition to the analysis above, the evaluator shall also perform the following tests on a TOE configured according to the Operational Guidance.
                <h:p/>
                <testlist>
                  <test>
                    Ensure that the TOE supports passwords/passphrases of 64 characters.
                  </test>
                  <test>
                    Ensure that the TOE does not accept more than the maximum number of characters 
					specified in FCS_CKM_EXT.5.1.
                  </test>
                  <test>
                    Ensure that the TOE does not accept less than the minimum number of characters specified 
					in FCS_CKM_EXT.5.4. If the minimum length is settable by the administrator, the evaluator 
					determines the minimum length or lengths to test.
                  </test>
                  <test>
                    Ensure that the TOE supports passwords consisting of all characters listed in FCS_CKM_EXT.5.2
					and of varying lengths within the range specified in FCS_CKM_EXT.5.4.
                  </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
          <f-element id="fcs-ckm-ext-5-2">
            <title>
              The TSF shall allow passwords to be composed of any combination of upper case characters, lower case characters, numbers, and the following special characters: 
              "!", "@", "#", "$", "%", "^", "&amp;", "*", "(", and ")", and
              <selectables>
                <selectable id="fcs_ckm_ext.5.2_2">
                  <assignable>
                    other supported special characters
                  </assignable>
                </selectable>
                <selectable id="fcs_ckm_ext.5.2_3">
                  no other characters
                </selectable>
              </selectables>
            </title>
            <note role="application">
              <h:i>
                The ST author assigns any other supported characters; if there are no 
			other supported characters, they should select "no other characters".
              </h:i>
            </note>
          </f-element>
          <f-element id="fcs-ckm-ext-5-3">
            <title>
              The TSF shall perform Password-based Key Derivation Functions in accordance with a 
			specified cryptographic algorithm [
              <h:i>
                <h:b>
                  HMAC-SHA-384
                </h:b>
              </h:i>
              ], with
              <assignable>
                positive integer of 4096 or more
              </assignable>
              iterations, and output cryptographic 
			key sizes [
              <h:i>
                <h:b>
                  256
                </h:b>
              </h:i>
              ] bits that meet the following: [
              <h:i>
                <h:b>
                  NIST SP 800-56B
                </h:b>
              </h:i>
              ].
            </title>
            <note role="application">
              The ST author selects the parameters based on the password-based key derivation function (PBKDF)
			  used by the TSF. 
              The password/passphrase must be conditioned into a string of bits that forms the submask to be used
			  as input into a key. 
              Conditioning can be performed using one of the identified hash functions or the process described in 
			  NIST SP 800-132; 
              the method used is selected by the ST author. SP 800-132 requires the use of a pseudorandom function
			  (PRF) consisting of HMAC with an approved hash function. 
              The ST author must select the hash function and ensure that appropriate claims are made for
			  FCS_COP.1/Hash and FCS_COP.1/KeyedHash in the Base-PP.
              <h:p/>
              Appendix A of SP 800-132 recommends setting the iteration count in order to increase the computation
			  needed to derive a key from a password, therefore increasing the workload of performing a password
			  recovery attack. 
              However, for this PP-Module, a minimum iteration count of 4096 is required in order to ensure that
			  12 bits of security is added to the password or passphrase value. 
              A significantly higher value is recommended to ensure optimal security.
            </note>
          </f-element>
          <f-element id="fcs-ckm-ext-5-4">
            <title>
              The TSF shall not accept passwords less than
              <selectables>
                <selectable id="fcs_ckm_ext.5.4_1">
                  a value settable by the administrator
                </selectable>
                <selectable id="fcs_ckm_ext.5.4_3">
                  <assignable>
                    minimum password length accepted by the TOE, must be ≥ 1
                  </assignable>
                </selectable>
              </selectables>
              and greater than the maximum password length defined in FCS_CKM_EXT.5.1.
            </title>
            <note role="application">
              <h:i>
                If the minimum password length is settable, then ST author chooses "a value settable by the
			  administrator for this component," as well as the "configure password/passphrase complexity setting"
			  item for FMT_SMF.1.1. If the minimum length is not settable, the ST author fills in the assignment with 
			  the minimum length the password must be (zero-length passwords are not allowed for compliant TOEs).
              </h:i>
            </note>
          </f-element>
        </f-component>
        <!-- FCS_COP_EXT.2 Key Wrapping -->
        <f-component cc-id="fcs_cop_ext.2" id="fcs-cop-ext-2" name="Key Wrapping">
          <consistency-rationale>
            This SFR defines how clients wrap keys.
            It does not impact functionality described by the Base-PP.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to implement key wrapping in a specified manner.
          </comp-lev>
          <dependencies>
            <no-link>
              FCS_COP.1
            </no-link>
            Cryptographic Operation
          </dependencies>
          <f-element id="fcs-cop-ext-2-1">
            <title>
              The TSF shall
              <selectables linebreak="yes">
                <selectable id="fcs_cop_ext.2.1_1">
                  use platform-provided functionality to perform Key Wrapping
                </selectable>
                <selectable id="fcs_cop_ext.2.1_2">
                  implement functionality to perform Key Wrapping
                </selectable>
              </selectables>
              in accordance with a specified cryptographic algorithm
              <selectables linebreak="yes">
                <selectable id="fcs_cop_ext.2.1_3">
                  AES Key Wrap
                </selectable>
                <selectable id="fcs_cop_ext.2.1_4">
                  AES Key Wrap with Padding
                </selectable>
                <selectable id="fcs_cop_ext.2.1_5">
                  RSA using the KTS-OAEP-basic scheme
                </selectable>
                <selectable id="fcs_cop_ext.2.1_6">
                  RSA using the KTS-OAEP-receiver-confirmation scheme
                </selectable>
                <selectable id="fcs_cop_ext.2.1_7">
                  ECC CDH
                </selectable>
              </selectables>
              and the cryptographic key size
              <selectables linebreak="yes">
                <selectable id="fcs_cop_ext.2.1_8">
                  256 bits (AES)
                </selectable>
                <selectable id="fcs_cop_ext.2.1_9">
                  3072 (RSA)
                </selectable>
                <selectable id="fcs_cop_ext.2.1_10">
                  4096 (RSA)
                </selectable>
                <selectable id="fcs_cop_ext.2.1_11">
                  384-bit prime modulus (ECC CDH)
                </selectable>
              </selectables>
              that meet the following:
              <selectables linebreak="yes">
                <selectable id="fcs_cop_ext.2.1_12">"NIST SP 800-38F" for Key Wrap (section 6.2) and Key Wrap with Padding (section 6.3)
                </selectable>
                <selectable id="fcs_cop_ext.2.1_13">"NIST SP 800-56B" for RSA using the KTS-OAEP-basic (section 9.2.3) and KTS-OAEP-receiver-confirmation (section 9.2.4) scheme, "NIST SP 800-56A rev 2" for ECC CDH (sections 5.6.1.2 and 6.2.2.2)
                </selectable>
              </selectables>
              .
            </title>
            <ext-comp-def-title>
              <title>
                The TSF shall
                <selectables linebreak="yes">
                  <selectable>
                    use platform-provided functionality to perform Key Wrapping
                  </selectable>
                  <selectable>
                    implement functionality to perform Key Wrapping
                  </selectable>
                </selectables>
                in accordance with a specified cryptographic algorithm
                <assignable>
                  cryptographic algorithm
                </assignable>
                and the cryptographic key size
                <assignable>
                  cryptographic key size
                </assignable>
                that meet the following:
                <assignable>
                  list of standards
                </assignable>
              </title>
            </ext-comp-def-title>
            <note role="application">
              This selection-based SFR is claimed when any of the selections that
				explicitly reference FCS_COP_EXT.2 are selected in FCS_CKM_EXT.3.1 or FCS_KYC_EXT.1.1.
              <h:p/>
              In the first selection, the ST author chooses the entity that
              performs the encryption or decryption. In the second selection, the ST author chooses the
              method used for encryption and decryption:
              <h:ul>
                <h:li>
                  Using one of the two AES-based Key Wrap methods
                specified in NIST SP 800-38F
                </h:li>
                <h:li>
                  Using one of the two KTS-OAEP schemes
                  for RSA as described in NIST SP 800-56B (KTS-OAEP-basic described in section
                  9.2.3)
                </h:li>
                <h:li>
                  Using ECC CDH as described in NIST SP 800-56A section
                    6.2.2.2.
                </h:li>
              </h:ul>
              The third selection should be made to reflect the key size.
Support for 256-bit AES key sizes will be required for
              products entering evaluation after Quarter 3, 2015. Based on the methods selected,
              the last selection should be used to select the appropriate references.
            </note>
            <aactivity level="component">
              <TSS>
                The evaluator shall ensure that the TSS has a high-level description of how the key is protected and 
			  meets the appropriate specification.
              </TSS>
              <Guidance/>
              <Tests/>
            </aactivity>
          </f-element>
        </f-component>
        <!-- FCS_SMC_EXT.1 Key Combining -->
        <f-component cc-id="fcs_smc_ext.1" id="fcs-smc-ext-1" name="Key Combining">
          <consistency-rationale>
            This SFR defines how clients combine keys.
            It does not impact functionality described by the Base-PP.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to implement submask combining in a specified manner.
          </comp-lev>
          <dependencies>
            <no-link>
              FCS_COP.1
            </no-link>
            Cryptographic Operation
          </dependencies>
          <f-element id="fcs-smc-ext-1-1">
            <title>
              The TSF shall combine submasks using the following method
              <selectables linebreak="yes">
                <selectable id="fcs_smc_ext.1.1_1">
                  exclusive OR (XOR)
                </selectable>
                <selectable id="fcs_smc_ext.1.1_2">
                  SHA-384
                </selectable>
                <selectable id="fcs_smc_ext.1.1_3">
                  SHA-512
                </selectable>
              </selectables>
              to generate another key.
            </title>
            <note role="application">
              This selection-based SFR is claimed when any of the selections that explicitly reference FCS_SMC_EXT.1 are selected in FCS_CKM_EXT.3.1 or FCS_KYC_EXT.1.1.
              <h:p/>
              This requirement specifies the way that a product may combine
              the various submasks by using either an XOR or an approved SHA-hash.
            </note>
            <aactivity level="component">
              <TSS>
                If keys are XORed together to form an intermediate key, the evaluator shall verify that the TSS 
				describes how this is performed (e.g., if there are ordering requirements, checks performed, etc.).
                <h:p/>
                The evaluator shall also confirm that the TSS describes how the length of the output produced is 
				at least the same as that of the data encryption key.
              </TSS>
              <Guidance/>
              <Tests/>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!-- 5.2.10 Identification and Authentication (FIA) -->
      <section title="Identification and Authentication (FIA)" id="fia">
        <ext-comp-def title="Simple Authentication and Security Layer (SASL)" fam-id="FIA_SASL_EXT">
          <fam-behavior>
            Components in this family define requirements for the implementation of SASL.
          </fam-behavior>
        </ext-comp-def>
        <!-- FIA_SASL_EXT.1 Simple Authentication and Security Layer (SASL) -->
        <f-component cc-id="fia_sasl_ext.1" id="fia-sasl-ext-1" name="Simple Authentication and Security Layer (SASL)">
          <consistency-rationale>
            This SFR defines an alternate method of transmitting messages.
          It does not impact functionality described by the Base-PP.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to implement SASL in a manner that conforms to applicable standards.
          </comp-lev>
          <f-element id="fia-sasl-ext-1-1">
            <title>
              The TSF shall implement support for Simple Authentication and Security
            Layer (SASL) that complies with RFC 4422.
            </title>
            <note role="application">
              SASL is needed if the email implements SMTP to send messages.
            Clients that do not use SMTP (e.g., ActiveSync or MAPI) would not need to implement
            support for SASL.
            </note>
            <aactivity level="component">
              <TSS>
                The evaluator shall verify that the TSS describes the details of the email client connecting to a 
			Mail Transfer Agent in terms of the SASL connection, 
            along with email client-specific options or procedures that might not be reflected in the specification.
              </TSS>
              <Guidance>
                The evaluator shall confirm that the operational guidance contains instructions for establishing the 
			connection to the Mail Transfer Agent.
              </Guidance>
              <Tests>
                The evaluator shall also perform the following tests:
                <testlist>
                  <test id="SASL">
                    The evaluator shall ensure that the email client is able to initiate communications 
				that require SASL (i.e., POP, IMAP, and SMTP), 
                setting up the connections as described in the operational guidance and ensuring that communication is
				successful.
                  </test>
                  <test>
                    The evaluator shall ensure, for each communication channel with an authorized IT entity 
				in
                    <xref to="SASL"/>
                    , 
                that a valid SASL handshake is performed. To perform this test, the evaluator shall use a sniffer 
				and a packet analyzer. 
                The sniffer and packet analyzer must allow the evaluator to view the plaintext email protocol (e.g., proxy, 
                loading the server private key). The evaluator shall identify the SASL handshake within the email protocol.
                  </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
          <f-element id="fia-sasl-ext-1-2">
            <title>
              The TSF shall support the POP3 CAPA and AUTH extensions for the SASL
            mechanism.
            </title>
          </f-element>
          <f-element id="fia-sasl-ext-1-3">
            <title>
              The TSF shall support the IMAP CAPABILITY and AUTHENTICATE extensions
            for the SASL mechanism.
            </title>
          </f-element>
          <f-element id="fia-sasl-ext-1-4">
            <title>
              The TSF shall support the SMTP AUTH extension for the SASL mechanism.
            </title>
            <note role="application">
              This selection-based SFR is claimed when IMAP, SMTP, or POP is selected in FTP_ITC.1.2.
              <h:p/>
              For an email client to support PKI X.509 certificates
            for POP3, IMAP, and SMTP as required in this document, the client must support the
            Simple Authentication and Security Layer (SASL) authentication method as described in
            RFC 4422, the AUTH and CAPA extensions for POP3, as described in RFC 5034, the
            AUTHENTICATION and CAPABILITY extensions for IMAP, as described in RFC 4959, and the
            AUTH extension for SMTP, as described in RFC 4954.
            </note>
          </f-element>
        </f-component>
      </section>
      <!-- 5.2.11 Protection of the TSF (FPT) -->
      <section title="Protection of the TSF (FPT)" id="fpt">
        <!-- FPT_AON_EXT.2 Trusted Installation and Update for Add-ons -->
        <f-component cc-id="fpt_aon_ext.2" id="fpt-aon-ext-2" name="Trusted Installation and Update for Add-ons">
          <consistency-rationale>
            This SFR defines how email clients verify add-ons.
	  It does not impact functionality described by the Base-PP.
          </consistency-rationale>
          <comp-lev>
            requires the TSF to implement a method to verify the integrity of add-ons and ensure that untrusted or unknown add-ons are not loaded for use.
          </comp-lev>
          <dependencies>
            <no-link>
              FCS_COP.1
            </no-link>
            Cryptographic Operation
            <h:p/>
            <no-link>
              FPT_AON_EXT.1
            </no-link>
            Support for Only Trusted Add-Ons
          </dependencies>
          <f-element id="fpt-aon-ext-2-1">
            <title>
              The TSF shall
              <selectables>
                <selectable id="fpt_aon_ext.2.1_1">
                  provide the ability
                </selectable>
                <selectable id="fpt_aon_ext.2.1_2">
                  leverage the platform
                </selectable>
              </selectables>
              to provide a means to cryptographically verify add-ons using a digital
	  signature mechanism and
              <selectables>
                <selectable id="fpt_aon_ext.2.1_3">
                  published hash
                </selectable>
                <selectable id="fpt_aon_ext.2.1_4">
                  no other functions
                </selectable>
              </selectables>
              prior to installation and update.
            </title>
            <aactivity level="component">
              <TSS>
                The evaluator shall verify that the TSS states that the email client will reject add-ons from untrusted 
			sources.
              </TSS>
              <Guidance>
                The evaluator shall verify that the operational guidance includes instructions on how to configure 
		the email client with trusted add-on sources.
              </Guidance>
              <Tests>
                The evaluator shall perform the following tests:
                <testlist>
                  <test>
                    The evaluator shall create or obtain an add-on signed by a trusted source and attempt to install
			it. The evaluator shall then verify that the signature on the add-on is valid and that the add-on can be 
				installed.
                  </test>
                  <test>
                    The evaluator shall create or obtain an add-on signed with an invalid certificate and attempt to
			install it. The evaluator shall then verify that the signed add-on is rejected and cannot be installed.
                  </test>
                  <test>
                    The evaluator shall create or obtain an add-on signed by a trusted source, modify the add-on
			without resigning it, and attempt to install it. The evaluator shall then verify that the signed add-on
				is rejected and cannot be installed.
                  </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
          <f-element id="fpt-aon-ext-2-2">
            <title>
              The TSF shall
              <selectables>
                <selectable id="fpt_aon_ext.2.2_1">
                  provide the ability
                </selectable>
                <selectable id="fpt_aon_ext.2.2_2">
                  leverage the platform
                </selectable>
              </selectables>
              to query the current version of the add-on.
            </title>
          </f-element>
          <f-element id="fpt-aon-ext-2-3">
            <title>
              The TSF shall prevent the automatic installation of add-ons.
            </title>
            <note role="application">
              This selection-based SFR is claimed when "trusted add-ons" is
		selected in FPT_AON_EXT.1.1.
            </note>
          </f-element>
        </f-component>
      </section>
    </sel-sfrs>
    <obj-sfrs/>
    <impl-dep-sfrs/>
  </sec:Security_Requirements>
  <appendix title="Implicitly Satisfied Requirements" id="satisfiedreqs">
    <h:table>
      <h:tr>
        <h:th>
          Requirement
        </h:th>
        <h:th>
          Rationale for Satisfaction
        </h:th>
      </h:tr>
      <h:tr>
        <h:td>
          FCS_COP.1 - Cryptographic Operation
        </h:td>
        <h:td>
          Several SFRs in this PP-Module (e.g., FPT_AON_EXT.2) have a dependency on FCS_COP.1 because they require the existence of other cryptographic functionality to be satisfied. The Base-PP permits either the TOE or its platform to implement cryptographic functions. If the TOE platform implements these functions, FCS_COP.1 is not claimed but all SFRs that depend on it are implicitly satisfied through the TOE platform's ability to provide the required functionality.
        </h:td>
      </h:tr>
      <h:tr>
        <h:td>
          FPT_STM.1 - Reliable Time Stamps
        </h:td>
        <h:td>
          FIA_X509_EXT.2/SMIME has a dependency on FPT_STM.1 because reliable time is needed to validate whether or not an X.509 certificate is expired. This requirement is implicitly satisfied through the Base-PP assumption that the TOE platform can be assumed to be a reliable time source.
        </h:td>
      </h:tr>
    </h:table>
  </appendix>
  <appendix title="Entropy Documentation and Assessment" id="EAR">
    The TOE does not require any additional supplementary information to describe its entropy sources beyond the requirements outlined in the Base-PP.
  </appendix>
  <bibliography>
    <cc-entry/>
    <entry id="bibAppPP">
      <tag>
        App PP
      </tag>
      <description>
        <h:a href="https://www.niap-ccevs.org/protectionprofiles/516">
          Protection Profile for Application Software, Version 2.0, June 16, 2025
        </h:a>
      </description>
    </entry>
    <entry id="bibmapispec">
      <tag>
        MS-OXCMAPIHTTP
      </tag>
      <description>
        <h:a href="https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxcmapihttp/d502edcf-0b22-42f2-8500-019f00d60245">
          Messaging Application Programming Interface (MAPI) Extensions for HTTP
        </h:a>
      </description>
    </entry>
    <entry id="MS-OXCRPC">
      <tag>
        MS-OXCRPC
      </tag>
      <description>
        <h:a href="https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxcrpc/137f0ce2-31fd-4952-8a7d-6c0b242e4b6a">
          Wire Format Protocol
        </h:a>
      </description>
    </entry>
  </bibliography>
</Module>
